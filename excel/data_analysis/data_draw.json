[
    {
        "id": "77f8372afde69977a62eda34f4cae760",
        "file_name": "77f8372afde69977a62eda34f4cae760.csv",
        "question": "According to the table, draw a bar chart to illustrate record high recorded in celsius degrees.",
        "answer": "y_references = [[24, 30, 36, 36, 35, 40, 44, 43, 41, 36, 32, 26]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Month', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', 'Year'], 'data': [['Record high °F (°C)', '76\\n(24)', '86\\n(30)', '96\\n(36)', '96\\n(36)', '95\\n(35)', '104\\n(40)', '111\\n(44)', '109\\n(43)', '105\\n(41)', '96\\n(36)', '90\\n(32)', '78\\n(26)', '111\\n(44)'], ['Average high °F (°C)', '46.2\\n(7.9)', '50.4\\n(10.2)', '59.1\\n(15.1)', '68.7\\n(20.4)', '75.5\\n(24.2)', '83.5\\n(28.6)', '88.7\\n(31.5)', '89.4\\n(31.9)', '80.8\\n(27.1)', '70.3\\n(21.3)', '59.2\\n(15.1)', '48.0\\n(8.9)', '68.3\\n(20.2)'], ['Average low °F (°C)', '26.1\\n(−3.3)', '29.0\\n(−1.7)', '37.8\\n(3.2)', '46.9\\n(8.3)', '55.7\\n(13.2)', '64.1\\n(17.8)', '68.7\\n(20.4)', '67.7\\n(19.8)', '58.9\\n(14.9)', '47.6\\n(8.7)', '39.2\\n(4)', '28.1\\n(−2.2)', '47.5\\n(8.6)'], ['Record low °F (°C)', '−23\\n(−31)', '−24\\n(−31)', '−11\\n(−24)', '18\\n(−8)', '28\\n(−2)', '41\\n(5)', '48\\n(9)', '44\\n(7)', '29\\n(−2)', '17\\n(−8)', '5\\n(−15)', '−12\\n(−24)', '−24\\n(−31)'], ['Precipitation inches (mm)', '1.99\\n(50.5)', '2.43\\n(61.7)', '3.54\\n(89.9)', '4.05\\n(102.9)', '4.99\\n(126.7)', '4.59\\n(116.6)', '3.18\\n(80.8)', '2.75\\n(69.9)', '4.43\\n(112.5)', '3.83\\n(97.3)', '4.19\\n(106.4)', '2.73\\n(69.3)', '42.7\\n(1,084.6)'], ['Snowfall inches (cm)', '1.6\\n(4.1)', '2.0\\n(5.1)', '0\\n(0)', '0\\n(0)', '0\\n(0)', '0\\n(0)', '0\\n(0)', '0\\n(0)', '0\\n(0)', '0\\n(0)', '0\\n(0)', '.7\\n(1.8)', '4.4\\n(11.2)'], ['Avg. precipitation days (≥ 0.01 in)', '5.4', '6.6', '8.2', '9.0', '11.2', '8.9', '7.0', '6.4', '7.6', '7.9', '7.0', '6.3', '91.4'], ['Avg. snowy days (≥ 0.1 in)', '.7', '.9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '.5', '2.3']]}\n\nLet's get start!\nQuestion: According to the table, draw a bar chart to illustrate record high recorded in celsius degrees.\n"
    },
    {
        "id": "908fe4eba12fbc8328b6ca83eaf617fb",
        "file_name": "908fe4eba12fbc8328b6ca83eaf617fb.csv",
        "question": "Please help me draw a stacked bar chart showing the number of wins, draws, and losses for the top 8 ranked teams.",
        "answer": "y_references = [[19, 16, 15, 15, 14, 12, 9, 9], [0, 2, 2, 0, 2, 0, 0, 0], [3, 4, 5, 7, 6, 10, 13, 13]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Unnamed: 0', 'Club', 'Played', 'Won', 'Drawn', 'Lost', 'Points For', 'Points Against', 'Points Difference', 'Tries For', 'Tries Against', 'Try Bonus', 'Losing Bonus', 'Points'], 'data': [[1, 'Saracens (RU)', 22, 19, 0, 3, 629, 353, 276, 68, 39, 10, 1, 87], [2, 'Northampton Saints (CH)', 22, 16, 2, 4, 604, 350, 254, 72, 31, 7, 3, 78], [3, 'Leicester Tigers (SF)', 22, 15, 2, 5, 542, 430, 112, 59, 41, 7, 3, 74], [4, 'Harlequins (SF)', 22, 15, 0, 7, 437, 365, 72, 43, 33, 4, 3, 67], [5, 'Bath', 22, 14, 2, 6, 495, 388, 107, 48, 38, 4, 3, 67], [6, 'Sale Sharks', 22, 12, 0, 10, 432, 399, 33, 46, 40, 3, 6, 57], [7, 'London Wasps', 22, 9, 0, 13, 451, 533, -82, 48, 56, 4, 9, 49], [8, 'Exeter Chiefs', 22, 9, 0, 13, 426, 480, -54, 40, 51, 2, 7, 45], [9, 'Gloucester', 22, 8, 0, 14, 440, 539, -99, 46, 60, 4, 8, 44], [10, 'London Irish', 22, 7, 0, 15, 396, 496, -100, 40, 49, 2, 6, 36], [11, 'Newcastle Falcons', 22, 3, 0, 19, 281, 544, -263, 23, 62, 2, 8, 22], [12, 'Worcester Warriors (R)', 22, 2, 0, 20, 325, 581, -256, 31, 64, 1, 7, 16]]}\n\nLet's get start!\nQuestion: Please help me draw a stacked bar chart showing the number of wins, draws, and losses for the top 8 ranked teams.\n"
    },
    {
        "id": "e5be717f4811ecea5e824a40a0675c39",
        "file_name": "e5be717f4811ecea5e824a40a0675c39.csv",
        "question": "Please help me draw a bar chart in inches, showing the trends in precipitation, rainfall, and snowfall as indicated in the table.",
        "answer": "y_references = [[0.429, 0.264, 0.461, 0.925, 1.587, 2.638, 2.299, 1.724, 1.134, 0.52, 0.417, 0.5],[0.012, 0.012, 0.067, 0.614, 1.508, 2.638, 2.311, 1.724, 1.122, 0.327, 0.075, 0.008],[6.14, 3.78, 5.08, 3.74, 0.83, 0.016, 0, 0, 0.31, 2.56, 4.72, 6.89] ]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Month', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', 'Year'], 'data': [['Record high °C (°F)', '10.8\\n(51.4)', '10.7\\n(51.3)', '25.7\\n(78.3)', '29.2\\n(84.6)', '35.4\\n(95.7)', '38.3\\n(100.9)', '36.7\\n(98.1)', '40.0\\n(104)', '35.1\\n(95.2)', '27.8\\n(82)', '21.0\\n(69.8)', '12.9\\n(55.2)', '40.0\\n(104)'], ['Average high °C (°F)', '−8.5\\n(16.7)', '−6.2\\n(20.8)', '1.6\\n(34.9)', '11.6\\n(52.9)', '18.1\\n(64.6)', '22.1\\n(71.8)', '25.2\\n(77.4)', '24.6\\n(76.3)', '18.6\\n(65.5)', '10.8\\n(51.4)', '−0.2\\n(31.6)', '−6.6\\n(20.1)', '9.3\\n(48.7)'], ['Daily mean °C (°F)', '−14.5\\n(5.9)', '−11.6\\n(11.1)', '−4.1\\n(24.6)', '4.8\\n(40.6)', '11.0\\n(51.8)', '15.5\\n(59.9)', '18.1\\n(64.6)', '17.3\\n(63.1)', '11.6\\n(52.9)', '4.1\\n(39.4)', '−5.2\\n(22.6)', '−11.9\\n(10.6)', '4.9\\n(40.8)'], ['Average low °C (°F)', '−19.0\\n(−2.2)', '−16.9\\n(1.6)', '−9.4\\n(15.1)', '−2.1\\n(28.2)', '3.8\\n(38.8)', '8.8\\n(47.8)', '11.0\\n(51.8)', '10.0\\n(50)', '4.4\\n(39.9)', '−2.5\\n(27.5)', '−10.4\\n(13.3)', '−17.1\\n(1.2)', '−3.3\\n(26.1)'], ['Record low °C (°F)', '−40.4\\n(−40.7)', '−43.4\\n(−46.1)', '−34.7\\n(−30.5)', '−17.4\\n(0.7)', '−11.4\\n(11.5)', '−2.3\\n(27.9)', '3.4\\n(38.1)', '-0.0\\n(32)', '−10.7\\n(12.7)', '−26.3\\n(−15.3)', '−36.1\\n(−33)', '−40.4\\n(−40.7)', '−43.4\\n(−46.1)'], ['Precipitation mm (inches)', '10.9\\n(0.429)', '6.7\\n(0.264)', '11.7\\n(0.461)', '23.5\\n(0.925)', '40.3\\n(1.587)', '67.0\\n(2.638)', '58.4\\n(2.299)', '43.8\\n(1.724)', '28.8\\n(1.134)', '13.2\\n(0.52)', '10.6\\n(0.417)', '12.7\\n(0.5)', '327.6\\n(12.898)'], ['Rainfall mm (inches)', '0.3\\n(0.012)', '0.3\\n(0.012)', '1.7\\n(0.067)', '15.6\\n(0.614)', '38.3\\n(1.508)', '67.0\\n(2.638)', '58.7\\n(2.311)', '43.8\\n(1.724)', '28.5\\n(1.122)', '8.3\\n(0.327)', '1.9\\n(0.075)', '0.2\\n(0.008)', '264.6\\n(10.417)'], ['Snowfall cm (inches)', '15.6\\n(6.14)', '9.6\\n(3.78)', '12.9\\n(5.08)', '9.5\\n(3.74)', '2.1\\n(0.83)', '0.04\\n(0.016)', '0\\n(0)', '0\\n(0)', '0.8\\n(0.31)', '6.5\\n(2.56)', '12.0\\n(4.72)', '17.5\\n(6.89)', '86.5\\n(34.06)']]}\n\nLet's get start!\nQuestion: Please help me draw a bar chart in inches, showing the trends in precipitation, rainfall, and snowfall as indicated in the table.\n"
    },
    {
        "id": "de82a1f1334f8d83cfd1a7fd13c29ed3",
        "file_name": "de82a1f1334f8d83cfd1a7fd13c29ed3.csv",
        "question": "Please help me draw an bar chart that shows the length of rivers and their drainage basin areas.",
        "answer": "y_references = [[6.3, 8.4, 11.5, 8.3, 20.0, 8.8, 29.0, 59.7, 19.1, 20.0, 27.6, 30.0, 24.3, 13.6, 26.9, 11.7, 55.0, 24.6, 19.2, 22.9, 14.6, 46.6, 20.7, 39.1, 40.7, 49.7, 32.0, 39.7, 32.1, 11.5], [21.2, 11.8, 38.9, 19.6, 113.1, 41.8, 196.2, 983.8, 92.0, 69.5, 137.8, 131.5, 119.6, 34.7, 164.6, 32.9, 717.7, 112.5, 31.2, 60.9, 84.7, 247.9, 70.2, 321.8, 323.7, 312.6, 114.0, 221.2, 171.9, 29.4]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Name', 'Position', 'Length\\n[km]', 'Drainage basin area\\n[km2]', 'Confluence\\n[by Lahn-km]', 'Mouth elevation\\n[m above MSL]'], 'data': [['Feudinge (Rüppersbach)', 'left', 6.3, 21.2, 9.8, 388], ['Ilse', 'right', 8.4, 11.8, 10.5, 382], ['Banfe', 'right', 11.5, 38.9, 18.5, 326], ['Laasphe', 'left', 8.3, 19.6, 19.4, 324], ['Perf', 'right', 20.0, 113.1, 24.7, 285], ['Dautphe', 'left', 8.8, 41.8, 37.5, 245], ['Wetschaft', 'left', 29.0, 196.2, 56.3, 192], ['Ohm', 'left', 59.7, 983.8, 58.7, 188], ['Allna', 'right', 19.1, 92.0, 77.1, 172], ['Zwester Ohm', 'left', 20.0, 69.5, 84.0, 165], ['Salzböde', 'right', 27.6, 137.8, 87.4, 164], ['Lumda', 'left', 30.0, 131.5, 93.6, 160], ['Wieseck', 'left', 24.3, 119.6, 102.2, 155], ['Bieber', 'right', 13.6, 34.7, 105.1, 151], ['Kleebach', 'left', 26.9, 164.6, 106.2, 150], ['Wetzbach', 'left', 11.7, 32.9, 119.6, 147], ['Dill', 'right', 55.0, 717.7, 120.4, 147], ['Solmsbach', 'left', 24.6, 112.5, 128.1, 141], ['Iserbach (Möttbach)', 'left', 19.2, 31.2, 131.4, 139], ['Ulmbach', 'right', 22.9, 60.9, 138.2, 135], ['Kallenbach', 'right', 14.6, 84.7, 141.3, 132], ['Weil', 'left', 46.6, 247.9, 149.4, 130], ['Kerkerbach', 'right', 20.7, 70.2, 176.0, 112], ['Emsbach', 'left', 39.1, 321.8, 181.0, 110], ['Elbbach', 'right', 40.7, 323.7, None, 109], ['Aar', 'left', 49.7, 312.6, None, 103], ['Dörsbach', 'left', 32.0, 114.0, None, 94], ['Gelbach (Aubach)', 'right', 39.7, 221.2, None, 93], ['Mühlbach', 'left', 32.1, 171.9, None, 85], ['Emsbach', 'right', 11.5, 29.4, None, 75]]}\n\nLet's get start!\nQuestion: Please help me draw an bar chart that shows the length of rivers and their drainage basin areas.\n"
    },
    {
        "id": "485b450b0ede043ce95109c0e9057578",
        "file_name": "485b450b0ede043ce95109c0e9057578.csv",
        "question": "Please help me draw a pie chart that shows the proportions of all species in Costa Rica.",
        "answer": "y_references = [[183, 838, 232, 258, 12119]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Country', 'Amphibians', 'Birds', 'Mammals', 'Reptile', 'Total terrestrial vertebrates', 'Vascular plants', 'Biodiversity'], 'data': [['Belize', 46, 544, 147, 140, 877, 2894, 3771], ['Costa Rica', 183, 838, 232, 258, 1511, 12119, 13630], ['El Salvador', 30, 434, 137, 106, 707, 2911, 3618], ['Guatemala', 133, 684, 193, 236, 1246, 8681, 9927], ['Honduras', 101, 699, 201, 213, 1214, 5680, 6894], ['Nicaragua', 61, 632, 181, 178, 1052, 7590, 8642], ['Panama', 182, 904, 241, 242, 1569, 9915, 11484]]}\n\nLet's get start!\nQuestion: Please help me draw a pie chart that shows the proportions of all species in Costa Rica.\n"
    },
    {
        "id": "64664032a7a369ee8b22f988514f1107",
        "file_name": "64664032a7a369ee8b22f988514f1107.csv",
        "question": "Please help me draw a pie chart showing the vote share of candidates from various political parties.",
        "answer": "y_references = [[14422, 13552, 9878, 1114, 246]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Party', 'Candidate', 'Votes', '%', '∆%'], 'data': [['Conservative', 'Joe Daniel', '14,422', '36.78', '+5.78'], ['Liberal', 'Yasmin Ratansi', '13,552', '34.56', '-13.51'], ['New Democratic', 'Mary Trapani Hynes', '9,878', '25.19', '+11.87'], ['Green', 'Akil Sadikali', '1,114', '2.84', '-4.05'], ['Christian Heritage', 'Ryan Kidd', '246', '0.63', '-0.07'], ['Total valid votes', 'Total valid votes', '39,212', '100.00', None], ['Total rejected ballots', 'Total rejected ballots', '218', '0.55', '–'], ['Turnout', 'Turnout', '39,430', '57.24', '–'], ['Eligible voters', 'Eligible voters', '68,890', '–', '–']]}\n\nLet's get start!\nQuestion: Please help me draw a pie chart showing the vote share of candidates from various political parties.\n"
    },
    {
        "id": "4119f4674c16142eed9eef4730b2c75f",
        "file_name": "4119f4674c16142eed9eef4730b2c75f.csv",
        "question": "Please help me draw an area chart showing the number of births and deaths during different time periods.",
        "answer": "y_references = [[9000, 10000, 12000, 13000, 16000, 18000, 20000, 21000, 19000, 16000, 15000, 15000],[5000, 6000, 6000, 7000, 7000, 8000, 8000, 8000, 7000, 5000, 5000, 5000] ]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Period', 'Live births per year', 'Deaths per year', 'Natural change per year', 'CBR1', 'CDR1', 'NC1', 'TFR1', 'IMR1'], 'data': [['1950-1955', '9 000', '5 000', '4 000', 47.9, 27.1, 20.8, 6.67, 184.8], ['1955-1960', '10 000', '6 000', '5 000', 49.0, 26.8, 22.3, 6.67, 181.4], ['1960-1965', '12 000', '6 000', '6 000', 48.5, 25.7, 22.8, 6.67, 174.1], ['1965-1970', '13 000', '7 000', '7 000', 47.8, 24.1, 23.8, 6.67, 163.1], ['1970-1975', '16 000', '7 000', '8 000', 47.0, 22.0, 25.1, 6.67, 149.3], ['1975-1980', '18 000', '8 000', '10 000', 45.8, 19.6, 26.2, 6.67, 133.2], ['1980-1985', '20 000', '8 000', '12 000', 42.7, 17.1, 25.6, 6.39, 117.1], ['1985-1990', '21 000', '8 000', '13 000', 40.4, 15.0, 25.3, 6.11, 104.0], ['1990-1995', '19 000', '7 000', '12 000', 35.2, 12.5, 22.7, 5.27, 87.5], ['1995-2000', '16 000', '5 000', '11 000', 29.2, 9.9, 19.3, 4.13, 69.7], ['2000-2005', '15 000', '5 000', '11 000', 25.2, 7.9, 17.2, 3.3, 52.8], ['2005-2010', '15 000', '5 000', '10 000', 21.5, 7.2, 14.4, 2.61, 44.4]]}\n\nLet's get start!\nQuestion: Please help me draw an area chart showing the number of births and deaths during different time periods.\n"
    },
    {
        "id": "b1ea3f96d887432df9bb3aa3bcf800d6",
        "file_name": "b1ea3f96d887432df9bb3aa3bcf800d6.csv",
        "question": "Please help me draw a percentage stacked bar chart that shows the proportion of different ethnic populations over time.",
        "answer": "y_references = [[31, 46, 56.8, 64.7, 86.6, 88.7, 90.9, 90.8, 90.9], [17, 14, 13.4, 9.6, 0.13, 0.07, 0.05, 0.03, 0.01], [13, 4, 5.3, 5, 2, 2.3, 2.5, 2.7, 2.8], [21, 11, 5.6, 3.6, 3.4, 3.1, 2.65, 2.4, 2.4], [6, 5, 9.4, 6, 5, 4.35, 2.8, 2.6, 2.2], [0.3, 5, 9.4, 0.01, 1.18, 0.73, 0.3, 0.4, 0.1], [1.7, 3, 2, 2.75, 0.12, 0.09, 0.08, 0.07, 0.04], [2.8, 3, 2.6, 1.8, 0.24, 0.13, 0.07, 0.12, 0.23], [0.5, 0.87, 0.9, 0.88, 0.2, 0.05, 0.3, 0.59, 0.85]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Ethnicity', '1880', '1899', '1913', '19301', '1956', '1966', '1977', '1992', '2002'], 'data': [['All', '139,671', '258,242', '380,430', '437,131', '593,659', '702,461', '863,348', '1,019,766', '971,643'], ['Romanian', '43,671 (31%)', '118,919 (46%)', '216,425 (56.8%)', '282,844 (64.7%)', '514,331 (86.6%)', '622,996 (88.7%)', '784,934 (90.9%)', '926,608 (90.8%)', '883,620 (90.9%)'], ['Bulgarian', '24,915 (17%)', '38,439 (14%)', '51,149 (13.4%)', '42,070 (9.6%)', '749 (0.13%)', '524 (0.07%)', '415 (0.05%)', '311 (0.03%)', '135 (0.01%)'], ['Turkish', '18,624 (13%)', '12,146 (4%)', '20,092 (5.3%)', '21,748 (5%)', '11,994 (2%)', '16,209 (2.3%)', '21,666 (2.5%)', '27,685 (2.7%)', '27,580 (2.8%)'], ['Tatar', '29,476 (21%)', '28,670 (11%)', '21,350 (5.6%)', '15,546 (3.6%)', '20,239 (3.4%)', '21,939 (3.1%)', '22,875 (2.65%)', '24,185 (2.4%)', '23,409 (2.4%)'], ['Russian-Lipovan', '8,250 (6%)', '12,801 (5%)', '35,859 (9.4%)', '26,210 (6%)²', '29,944 (5%)', '30,509 (4.35%)', '24,098 (2.8%)', '26,154 (2.6%)', '21,623 (2.2%)'], ['Ruthenian\\n(Ukrainian from 1956)', '455 (0.3%)', '13,680 (5%)', '35,859 (9.4%)', '33 (0.01%)', '7,025 (1.18%)', '5,154 (0.73%)', '2,639 (0.3%)', '4,101 (0.4%)', '1,465 (0.1%)'], ['Dobrujan Germans', '2,461 (1.7%)', '8,566 (3%)', '7,697 (2%)', '12,023 (2.75%)', '735 (0.12%)', '599 (0.09%)', '648 (0.08%)', '677 (0.07%)', '398 (0.04%)'], ['Greek', '4,015 (2.8%)', '8,445 (3%)', '9,999 (2.6%)', '7,743 (1.8%)', '1,399 (0.24%)', '908 (0.13%)', '635 (0.07%)', '1,230 (0.12%)', '2,270 (0.23%)'], ['Roma', '702 (0.5%)', '2,252 (0.87%)', '3,263 (0.9%)', '3,831 (0.88%)', '1,176 (0.2%)', '378 (0.05%)', '2,565 (0.3%)', '5,983 (0.59%)', '8,295 (0.85%)']]}\n\nLet's get start!\nQuestion: Please help me draw a percentage stacked bar chart that shows the proportion of different ethnic populations over time.\n"
    },
    {
        "id": "b0bce3c8708c147f9d7b85cac2fb8549",
        "file_name": "b0bce3c8708c147f9d7b85cac2fb8549.csv",
        "question": "Please help me draw a line chart showing the time difference between all competitors and the first-place finisher.",
        "answer": "y_references = [[0, 3.13, 4.10, 4.42, 4.46, 5.03, 6.70, 6.95, 7.35, 7.93, 9.79, 2.89, 5.45, 9.49, 9.98, 5.35, 6.46, 6.99, 7.28, 7.99, 9.71, 3.34, 3.86, 4.94, 5.60, 7.35, 8.10, 9.04, 9.08, 9.60, 10.64, 10.65, 9.61]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Pos', 'No', 'Driver', 'Constructor', 'Lap', 'Gap'], 'data': [[1, 98, 'Walt Faulkner', 'Kurtis Kraft-Offenhauser', '4:27.97', '–'], [2, 28, 'Fred Agabashian', 'Kurtis Kraft-Offenhauser', '4:31.10', '+ 3.13'], [3, 31, 'Mauri Rose', 'Deidt-Offenhauser', '4:32.07', '+ 4.10'], [4, 5, 'George Connor', 'Lesovsky-Offenhauser', '4:32.39', '+ 4.42'], [5, 1, 'Johnnie Parsons', 'Kurtis Kraft-Offenhauser', '4:32.43', '+ 4.46'], [6, 49, 'Jack McGrath', 'Kurtis Kraft-Offenhauser', '4:33.00', '+ 5.03'], [7, 69, 'Duke Dinsmore', 'Kurtis Kraft-Offenhauser', '4:34.67', '+ 6.70'], [8, 14, 'Tony Bettenhausen', 'Deidt-Offenhauser', '4:34.92', '+ 6.95'], [9, 17, 'Joie Chitwood', 'Kurtis Kraft-Offenhauser', '4:35.32', '+ 7.35'], [10, 3, 'Bill Holland', 'Deidt-Offenhauser', '4:35.90', '+ 7.93'], [11, 59, 'Pat Flaherty', 'Kurtis Kraft-Offenhauser', '4:37.76', '+ 9.79'], [12, 54, 'Cecil Green', 'Kurtis Kraft-Offenhauser', '4:30.86', '+ 2.89'], [13, 18, 'Duane Carter', 'Stevens-Offenhauser', '4:33.42', '+ 5.45'], [14, 21, 'Spider Webb', 'Maserati-Offenhauser', '4:37.46', '+ 9.49'], [15, 81, 'Jerry Hoyt', 'Kurtis Kraft-Offenhauser', '4:37.95', '+ 9.98'], [16, 2, 'Myron Fohr', 'Marchese-Offenhauser', '4:33.32', '+ 5.35'], [17, 24, 'Bayliss Levrett', 'Adams-Offenhauser', '4:34.43', '+ 6.46'], [18, 45, 'Dick Rathmann', 'Watson-Offenhauser', '4:34.96', '+ 6.99'], [19, 7, 'Paul Russo', 'Nichels-Offenhauser', '4:35.25', '+ 7.28'], [20, 4, 'Walt Brown', 'Kurtis Kraft-Offenhauser', '4:35.96', '+ 7.99'], [21, 12, 'Henry Banks', 'Maserati-Offenhauser', '4:37.68', '+ 9.71'], [22, 67, 'Bill Schindler', 'Snowberger-Offenhauser', '4:31.31', '+ 3.34'], [23, 8, 'Lee Wallard', 'Moore-Offenhauser', '4:31.83', '+ 3.86'], [24, 55, 'Troy Ruttman', 'Lesovsky-Offenhauser', '4:32.91', '+ 4.94'], [25, 23, 'Sam Hanks', 'Kurtis Kraft-Offenhauser', '4:33.57', '+ 5.60'], [26, 15, 'Mack Hellings', 'Kurtis Kraft-Offenhauser', '4:35.32', '+ 7.35'], [27, 22, 'Jimmy Davies', 'Ewing-Offenhauser', '4:36.07', '+ 8.10'], [28, 76, 'Jim Rathmann', 'Wetteroth-Offenhauser', '4:37.01', '+ 9.04'], [29, 27, 'Walt Ader', 'Rae-Offenhauser', '4:37.05', '+ 9.08'], [30, 77, 'Jackie Holmes', 'Olson-Offenhauser', '4:37.57', '+ 9.60'], [31, 75, 'Gene Hartley', 'Langley-Offenhauser', '4:38.61', '+ 10.64'], [32, 61, 'Jimmy Jackson', 'Kurtis Kraft-Cummins', '4:38.62', '+ 10.65'], [33, 62, 'Johnny McDowell', 'Kurtis Kraft-Offenhauser', '4:37.58', '+ 9.61']]}\n\nLet's get start!\nQuestion: Please help me draw a line chart showing the time difference between all competitors and the first-place finisher.\n"
    },
    {
        "id": "a7b1009dbaec71cea179c8bc90230152",
        "file_name": "a7b1009dbaec71cea179c8bc90230152.csv",
        "question": "Please help me draw a bar chart showing the average funding per student for all the schools listed in the table.",
        "answer": "y_references = [[524.97, 841.56, 852.61, 1121.34, 1071.93, 1468.29, 1375.31, 1256.55, 1797.77, 1599.56, 1304.55]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Institution', 'Location', 'Established', 'Gained university status', 'Vice-chancellor', 'Total number of students', 'Research funding (£,000)'], 'data': [['Birkbeck, University of London', 'London', 1823, 1920, 'Professor David Latchman', '19,020', '9,985'], ['University of East Anglia', 'Norwich', 1963, 1963, 'Professor Edward Acton', '19,585', '16,482'], ['University of Essex', 'Colchester', 1964, 1964, 'Professor Anthony Forster', '11,690', '9,967'], ['Goldsmiths, University of London', 'London', 1891, 1904, 'Dr Pat Loughrey', '7,615', '8,539'], ['Institute of Education, University of London', 'London', 1902, 1932, 'Professor Chris Husbands', '7,215', '7,734'], ['University of Lancaster', 'Lancaster', 1964, 1964, 'Professor Mark Smith', '12,695', '18,640'], ['University of Leicester', 'Leicester', 1921, 1957, 'Professor Robert Burgess', '16,160', '22,225'], ['Loughborough University', 'Loughborough', 1909, 1966, 'Professor Robert Allison', '17,825', '22,398'], ['Royal Holloway, University of London', 'Egham', 1849, 1900, 'Professor Paul Layzell (Principal)', '7,620', '13,699'], ['SOAS, University of London', 'London', 1916, 1916, 'Professor Paul Webley', '4,525', '7,238'], ['University of Sussex', 'Brighton', 1961, 1961, 'Professor Michael Farthing', '12,415', '16,196']]}\n\nLet's get start!\nQuestion: Please help me draw a bar chart showing the average funding per student for all the schools listed in the table.\n"
    },
    {
        "id": "193c026fe2590582330b4506df2091bc",
        "file_name": "193c026fe2590582330b4506df2091bc.csv",
        "question": "Please help me draw a radar chart that displays the extent to which various language features are represented in English.",
        "answer": "y_references = [[0.30, 1.67, 1.00, 0.09, 0.32, 0.02, 0.38]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Unnamed: 0', 'agglutination', 'synthesis', 'compounding', 'derivation', 'inflection', 'prefixing', 'suffixing'], 'data': [['Swahili', 0.67, 2.56, 1.0, 0.03, 0.31, 0.45, 0.16], ['spoken Turkish', 0.67, 1.75, 1.04, 0.06, 0.38, 0.0, 0.44], ['written Turkish', 0.6, 2.33, 1.0, 0.11, 0.43, 0.0, 0.54], ['Yakut', 0.51, 2.17, 1.02, 0.16, 0.38, 0.0, 0.53], ['Greek', 0.4, 1.82, 1.02, 0.07, 0.37, 0.02, 0.42], ['English', 0.3, 1.67, 1.0, 0.09, 0.32, 0.02, 0.38], ['Eskimo', 0.03, 3.7, 1.0, 0.34, 0.47, 0.0, 0.73]]}\n\nLet's get start!\nQuestion: Please help me draw a radar chart that displays the extent to which various language features are represented in English.\n"
    },
    {
        "id": "76bd1c55217e71d2dad443c1499400dc",
        "file_name": "76bd1c55217e71d2dad443c1499400dc.csv",
        "question": "Please help me draw a stacked bar chart showing the number of wins, losses, and draws, along with the total number of games played by the ATL team in the regular season from 1997 to 2003.",
        "answer": "y_references = [[7, 14, 5, 4, 7, 9, 3],[9, 2, 11, 12, 9, 6, 10],[0, 0, 0, 0, 0, 1, 0]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Team', 'Year', 'Regular Season\\nWon', 'Regular Season\\nLost', 'Regular Season\\nTies', 'Regular Season\\nWin %', 'Regular Season\\nFinish', 'Post Season\\nWon', 'Post Season\\nLost', 'Post Season\\nWin %', 'Post Season\\nResult'], 'data': [['DEN', '1981', 10, 6, 0, 0.625, '2nd in AFC West', '-', '-', '-', '-'], ['DEN', '1982', 2, 7, 0, 0.222, '5th in AFC West', '-', '-', '-', '-'], ['DEN', '1983', 9, 7, 0, 0.563, '2nd in AFC West', '0', '1', '.000', 'Lost to Seattle Seahawks in AFC Wild Card Game.'], ['DEN', '1984', 13, 3, 0, 0.813, '1st in AFC West', '0', '1', '.000', 'Lost to Pittsburgh Steelers in AFC Divisional Game.'], ['DEN', '1985', 11, 5, 0, 0.688, '2nd in AFC West', '-', '-', '-', '-'], ['DEN', '1986', 11, 5, 0, 0.688, '1st in AFC West', '2', '1', '.667', 'Lost to New York Giants in Super Bowl XXI.'], ['DEN', '1987', 10, 4, 1, 0.714, '1st in AFC West', '2', '1', '.667', 'Lost to Washington Redskins in Super Bowl XXII.'], ['DEN', '1988', 8, 8, 0, 0.5, '2nd in AFC West', '-', '-', '-', '-'], ['DEN', '1989', 11, 5, 0, 0.688, '1st in AFC West', '2', '1', '.667', 'Lost to San Francisco 49ers in Super Bowl XXIV.'], ['DEN', '1990', 5, 11, 0, 0.313, '5th in AFC West', '-', '-', '-', '-'], ['DEN', '1991', 12, 4, 0, 0.75, '1st in AFC West', '1', '1', '.500', 'Lost to Buffalo Bills in AFC Championship Game.'], ['DEN', '1992', 8, 8, 0, 0.5, '3rd in AFC West', '-', '-', '-', '-'], ['DEN Total', 'DEN Total', 110, 73, 1, 0.601, None, '7', '6', '.538', None], ['NYG', '1993', 11, 5, 0, 0.688, '2nd in NFC East', '1', '1', '.500', 'Lost to San Francisco 49ers in NFC Divisional Game.'], ['NYG', '1994', 9, 7, 0, 0.563, '2nd in NFC East', '-', '-', '-', '-'], ['NYG', '1995', 5, 11, 0, 0.313, '4th in NFC East', '-', '-', '-', '-'], ['NYG', '1996', 6, 10, 0, 0.375, '5th in NFC East', '-', '-', '-', '-'], ['NYG Total', 'NYG Total', 31, 33, 0, 0.484, None, '1', '1', '.500', None], ['ATL', '1997', 7, 9, 0, 0.438, '2nd in NFC West', '-', '-', '-', '-'], ['ATL', '1998', 14, 2, 0, 0.875, '1st in NFC West', '2', '1', '.667', 'Lost to Denver Broncos in Super Bowl XXXIII.'], ['ATL', '1999', 5, 11, 0, 0.313, '3rd in NFC West', '-', '-', '-', '-'], ['ATL', '2000', 4, 12, 0, 0.25, '5th in NFC West', '-', '-', '-', '-'], ['ATL', '2001', 7, 9, 0, 0.438, '3rd in NFC South', '-', '-', '-', '-'], ['ATL', '2002', 9, 6, 1, 0.594, '2nd in NFC South', '1', '1', '.500', 'Lost to Philadelphia Eagles in NFC Divisional Game.'], ['ATL', '2003', 3, 10, 0, 0.231, '4th in NFC South', '-', '-', '-', '-'], ['ATL Total', 'ATL Total', 49, 59, 1, 0.454, None, '3', '2', '.600', None], ['Total', 'Total', 190, 165, 2, 0.535, None, '11', '9', '.550', None]]}\n\nLet's get start!\nQuestion: Please help me draw a stacked bar chart showing the number of wins, losses, and draws, along with the total number of games played by the ATL team in the regular season from 1997 to 2003.\n"
    },
    {
        "id": "f4d60e32414319753c3f708a4b9664ea",
        "file_name": "f4d60e32414319753c3f708a4b9664ea.csv",
        "question": "Please help me draw a pie chart showing the box office earnings of the top ten ranked movies.",
        "answer": "y_references = [[460998007, 300000000, 166000000, 139486124, 102000000, 71215869, 51061196, 50800000, 50681884, 46838673]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Rank', 'Title', 'Studio', 'Actors', 'Gross'], 'data': [[1.0, 'Star Wars*', 'Lucasfilm/20th Century Fox', 'Mark Hamill, Harrison Ford, Carrie Fisher, Peter Cushing, Alec Guinness, David Prowse, James Earl Jones, Anthony Daniels, Kenny Baker and Peter Mayhew', '$460,998,007'], [2.0, 'Smokey and the Bandit', 'Universal/Rastar', 'Burt Reynolds, Sally Field, Jackie Gleason, Jerry Reed and Mike Henry', '$300,000,000'], [3.0, 'Close Encounters of the Third Kind*', 'Columbia', 'Richard Dreyfuss, Teri Garr, Melinda Dillon and François Truffaut', '$166,000,000'], [4.0, 'Saturday Night Fever', 'Paramount', 'John Travolta and Karen Lynn Gorney', '$139,486,124'], [5.0, 'The Goodbye Girl', 'MGM/Warner Bros./Rastar', 'Richard Dreyfuss, Marsha Mason and Quinn Cummings', '$102,000,000'], [6.0, 'The Rescuers*', 'Disney', 'voices of Eva Gabor, Bob Newhart and Geraldine Page', '$71,215,869'], [7.0, 'Oh, God!', 'Warner Bros.', 'George Burns, John Denver and Teri Garr', '$51,061,196'], [8.0, 'A Bridge Too Far', 'United Artists', \"Dirk Bogarde, James Caan, Sean Connery, Elliott Gould, Laurence Olivier, Ryan O'Neal, Robert Redford, Liv Ullmann, Michael Caine, Edward Fox, Anthony Hopkins, Gene Hackman, Hardy Krüger and Maximilian Schell\", '$50,800,000'], [9.0, 'The Deep', 'Columbia', 'Robert Shaw, Nick Nolte and Jacqueline Bisset', '$50,681,884'], [10.0, 'The Spy Who Loved Me', 'United Artists', 'Roger Moore, Barbara Bach, Curd Jürgens and Richard Kiel', '$46,838,673'], [11.0, 'Annie Hall', 'United Artists', 'Woody Allen and Diane Keaton', '$38,251,425'], [12.0, 'Semi-Tough', 'United Artists', 'Burt Reynolds, Kris Kristofferson and Jill Clayburgh', '$37,187,139'], [13.0, \"Pete's Dragon\", 'Disney', 'Helen Reddy, Mickey Rooney and Shelley Winters', '$36,000,000'], [14.0, 'The Gauntlet', 'Warner Bros.', 'Clint Eastwood and Sondra Locke', '$35,400,000'], [15.0, 'The Turning Point', '20th Century Fox', 'Shirley MacLaine, Anne Bancroft, Tom Skerritt, Mikhail Baryshnikov and Leslie Browne', '$33,600,000'], [16.0, 'Heroes', 'Universal', 'Henry Winkler, Sally Field, and Harrison Ford', '$33,500,000'], [17.0, 'High Anxiety', '20th Century Fox', 'Mel Brooks, Madeline Kahn, Cloris Leachman, Harvey Korman, Ron Carey, Howard Morris and Dick Van Patten', '$31,063,038'], [18.0, 'Exorcist II: The Heretic', 'Warner Bros.', 'Linda Blair, Richard Burton, Louise Fletcher, Max von Sydow and James Earl Jones', '$30,749,142'], [19.0, \"Airport '77\", 'Universal', 'Jack Lemmon, Lee Grant and James Stewart', '$30,000,000'], [20.0, 'Herbie Goes to Monte Carlo', 'Disney', 'Dean Jones, Don Knotts and Julie Sommars', '$29,000,000'], [21.0, 'Slap Shot', 'Universal', 'Paul Newman and Strother Martin', '$28,000,000'], [22.0, 'The Other Side of Midnight', '20th Century Fox', 'Marie-France Pisier, John Beck and Susan Sarandon', '$24,652,021'], [23.0, 'Looking for Mr. Goodbar', 'Paramount', 'Diane Keaton, Tuesday Weld and Richard Gere', '$22,512,655'], [24.0, 'For the Love of Benji', 'Mulberry Square', 'Benjean, Patsy Garrett and Ed Nelson', '$22,257,624'], [25.0, \"The World's Greatest Lover\", '20th Century Fox', 'Gene Wilder, Carol Kane and Dom DeLuise', '$21,000,000'], [26.0, 'Julia', '20th Century Fox', 'Jane Fonda, Vanessa Redgrave, Jason Robards, Hal Holbrook, Rosemary Murphy and Maximilian Schell', '$20,714,400']]}\n\nLet's get start!\nQuestion: Please help me draw a pie chart showing the box office earnings of the top ten ranked movies.\n"
    },
    {
        "id": "8d2f95dcfcff9966314745491802b50c",
        "file_name": "8d2f95dcfcff9966314745491802b50c.csv",
        "question": "Please help me draw a bar chart showing the population, area, and density information for each region.",
        "answer": "y_references = [[230000, 180000, 160000, 210000, 330000, 60000, 440000, 440000, 210000, 450000],[359, 566, 358, 325, 6094, 427, 9877, 7870, 7368, 7191],[641, 318, 447, 646, 54, 141, 45, 56, 29, 63]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['#', 'Name', 'Hanzi', 'Hanyu Pinyin', 'Population (2003 est.)', 'Area (km²)', 'Density (/km²)'], 'data': [[1, 'Aimin District', '爱民区', 'Àimín Qū', '230,000', '359', 641], [2, \"Dong'an District\", '东安区', \"Dōng'ān Qū\", '180,000', '566', 318], [3, 'Yangming District', '阳明区', 'Yángmíng Qū', '160,000', '358', 447], [4, \"Xi'an District\", '西安区', \"Xī'ān Qū\", '210,000', '325', 646], [5, 'Muling City', '穆棱市', 'Mùlíng Shì', '330,000', '6,094', 54], [6, 'Suifenhe City', '绥芬河市', 'Suífēnhé Shi', '60,000', '427', 141], [7, 'Hailin City', '海林市', 'Hǎilín Shì', '440,000', '9,877', 45], [8, \"Ning'an City\", '宁安市', \"Níng'ān Shì\", '440,000', '7,870', 56], [9, 'Dongning County', '东宁县', 'Dōngníng Xiàn', '210,000', '7,368', 29], [10, 'Linkou County', '林口县', 'Línkǒu Xiàn', '450,000', '7,191', 63]]}\n\nLet's get start!\nQuestion: Please help me draw a bar chart showing the population, area, and density information for each region.\n"
    },
    {
        "id": "7b4151479725d585c4b0be8c8ae4f9ed",
        "file_name": "7b4151479725d585c4b0be8c8ae4f9ed.csv",
        "question": "Please help me draw a scatter plot showing the relationship between the length of the event and the time taken by the winning athletes in all the running events of this competition",
        "answer": "y_references = [[7.17, 22.41, 51.62, 120.42, 246.46, 530.47]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Event', 'Gold', 'Gold.1', 'Silver', 'Silver.1', 'Bronze', 'Bronze.1'], 'data': [['60 metres', 'Nelli Cooman (NED)', '7.17', 'Melanie Paschke (GER)', '7.19', 'Patricia Girard (FRA)', '7.19'], ['200 metres', 'Galina Malchugina (RUS)', '22.41', 'Silke Knoll (GER)', '22.96', 'Jacqueline Poelman (NED)', '23.43'], ['400 metres', 'Svetlana Goncharenko (RUS)', '51.62', 'Tatyana Alekseyeva (RUS)', '51.77', 'Viviane Dorsile (FRA)', '51.92'], ['800 metres', 'Natalya Dukhnova (BLR)', '2:00.42', 'Ella Kovacs (ROM)', '2:00.49', 'Carla Sacramento (POR)', '2:01.12'], ['1500 metres', 'Yekaterina Podkopayeva (RUS)', '4:06.46', 'Lyudmila Rogachova (RUS)', '4:06.60', 'Małgorzata Rydz (POL)', '4:06.98'], ['3000 metres', 'Fernanda Ribeiro (POR)', '8:50.47', 'Margareta Keszeg (ROM)', '8:55.61', 'Anna Brzezińska (POL)', '8:56.90'], ['60 metres hurdles', 'Yordanka Donkova (BUL)', '7.85', 'Eva Sokolova (RUS)', '7.89', 'Anne Piquereau (FRA)', '7.91'], ['3000 metres walk', 'Annarita Sidoti (ITA)', '11:54.32', 'Beate Gummelt (GER)', '11:56.01', 'Yelena Arshintseva (RUS)', '11:57.48'], ['High jump', 'Stefka Kostadinova (BUL)', '1.98', 'Desislava Aleksandrova (BUL)', '1.96', 'Sigrid Kirchmann (AUT)', '1.94 NR'], ['Long jump', 'Heike Drechsler (GER)', '7.06', 'Ljudmila Ninova (AUT)', '6.78', 'Inessa Kravets (UKR)', '6.72'], ['Triple jump', 'Inna Lasovskaya (RUS)', '14.88', 'Anna Biryukova (RUS)', '14.72', 'Sofiya Bozhanova (BUL)', '14.52'], ['Shot put', 'Astrid Kumbernuss (GER)', '19.44', 'Larisa Peleshenko (RUS)', '19.16', 'Svetla Mitkova (BUL)', '19.09'], ['Pentathlon', 'Larisa Turchinskaya (RUS)', '4801', 'Rita Ináncsi (HUN)', '4775 NR', 'Urszula Włodarczyk (POL)', '4668']]}\n\nLet's get start!\nQuestion: Please help me draw a scatter plot showing the relationship between the length of the event and the time taken by the winning athletes in all the running events of this competition\n"
    },
    {
        "id": "d460758d99ecaaf80409bcf5c8918b8a",
        "file_name": "d460758d99ecaaf80409bcf5c8918b8a.csv",
        "question": "Please help me draw a line chart showing the relationship between the number of spectators and the dates of the matches.",
        "answer": "y_references = [[75338, 74624, 76322, 72404, 71030, 72000, 74110]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Date', 'Time (EDT)', 'Team #1', 'Res.', 'Team #2', 'Round', 'Spectators'], 'data': [['1994-06-18', 16.0, 'Italy', '0–1', 'Republic of Ireland', 'Group E', '75,338'], ['1994-06-23', 16.0, 'Italy', '1–0', 'Norway', 'Group E', '74,624'], ['1994-06-25', 12.3, 'Saudi Arabia', '2–1', 'Morocco', 'Group F', '76,322'], ['1994-06-28', 12.3, 'Republic of Ireland', '0–0', 'Norway', 'Group E', '72,404'], ['1994-07-05', 16.3, 'Mexico', '1–1 (1–3 on pen.)', 'Bulgaria', 'Round of 16', '71,030'], ['1994-07-10', 12.0, 'Bulgaria', '2–1', 'Germany', 'Quarterfinals', '72,000'], ['1994-07-13', 16.0, 'Bulgaria', '1–2', 'Italy', 'Semifinals', '74,110']]}\n\nLet's get start!\nQuestion: Please help me draw a line chart showing the relationship between the number of spectators and the dates of the matches.\n"
    },
    {
        "id": "3bba76d2d41024fde7d3061dc3e4c230",
        "file_name": "3bba76d2d41024fde7d3061dc3e4c230.csv",
        "question": "Please help me draw a line chart showing the trend in the athlete's number of attacks",
        "answer": "y_references = [[ 109, 87, 127, 103, 192, 205, 94, 182, 221, 195, 152, 5, 13 ]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Year', 'Team', 'GP', 'Att', 'Yds', 'Avg', 'Long', 'Rush TD', 'Rec', 'Yds.1', 'Avg.1', 'Long.1', 'Rec TD'], 'data': [['1981', 'San Diego Chargers', 14, '109', '525', 4.8, 28, 3, 46, '329', 7.2, 29, 3], ['1982', 'San Digeo Chargers', 9, '87', '430', 4.9, 48, 6, 13, '66', 5.1, 12, 0], ['1983', 'San Diego Chargers', 15, '127', '516', 4.1, 61, 3, 25, '215', 8.6, 36, 0], ['1984', 'Cincinnati Bengals', 15, '103', '396', 3.8, 33, 2, 34, '268', 7.9, 27, 2], ['1985', 'Cincinnati Bengals', 16, '192', '929', 4.8, 39, 7, 55, '576', 10.5, 57, 5], ['1986', 'Cincinnati Bengals', 16, '205', '1,087', 5.3, 56, 5, 54, '686', 12.7, 54, 4], ['1987', 'Cincinnati Bengals', 9, '94', '280', 3.1, 18, 1, 22, '272', 12.4, 46, 2], ['1988', 'Cincinnati Bengals', 15, '182', '931', 5.1, 51, 8, 29, '287', 9.9, 28, 6], ['1989', 'Cincinnati Bengals', 16, '221', '1,239', 5.6, 65, 7, 37, '306', 8.3, 25, 2], ['1990', 'Cincinnati Bengals', 16, '195', '1,004', 5.1, 56, 5, 26, '269', 10.3, 35, 4], ['1991', 'Cincinnati Bengals', 15, '152', '571', 3.8, 25, 2, 40, '348', 8.7, 40, 2], ['1992', 'Tampa Bay Buccaneers', 2, '5', '6', 1.2, 4, 0, 0, '0', 0.0, 0, 0], ['1992', 'Cleveland Browns', 4, '13', '38', 2.9, 13, 0, 2, '-1', -0.5, 4, 0], ['Career Totals', None, 162, '1,685', '7,962', 4.7, 65, 49, 383, '3,621', 9.5, 57, 30]]}\n\nLet's get start!\nQuestion: Please help me draw a line chart showing the trend in the athlete's number of attacks\n"
    },
    {
        "id": "fcec735ee13d0a97869221546baacd18",
        "file_name": "fcec735ee13d0a97869221546baacd18.csv",
        "question": "Please help me draw a scatter plot showing the relationship between the coin value and its diameter length.",
        "answer": "y_references = [[18, 21, 19, 24, 29, 32, 30, 29]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Value', 'Diameter', 'Composition', '1979–1989\\nObverse', '1979–1989\\nReverse'], 'data': [['1 cent', '18 mm', 'Bronze', 'State arms', 'Frigate Birds'], ['2 cents', '21 mm', 'Bronze', 'State arms', \"B'abal plant\"], ['5 cents', '19 mm', 'Cupronickel', 'State arms', 'Tokay gecko'], ['10 cents', '24 mm', 'Cupronickel', 'State arms', 'Breadfruit'], ['20 cents', '29 mm', 'Cupronickel', 'State arms', 'Dolphins'], ['50 cents', '32 mm', 'Cupronickel', 'State arms', 'Panda nut plant'], ['1 dollar', '30 mm', 'Cupronickel', 'State arms', 'Outrigger canoe'], ['2 dollars', '29 mm', 'Nickel-Brass', 'State arms', 'Meeting lodge/\\\\Tenth Anniversary of Independence\\\\\"\"']]}\n\nLet's get start!\nQuestion: Please help me draw a scatter plot showing the relationship between the coin value and its diameter length.\n"
    },
    {
        "id": "7b87f70bc3d95922c6b3335e7a737fe2",
        "file_name": "7b87f70bc3d95922c6b3335e7a737fe2.csv",
        "question": "Please help me draw a radar chart, showing the average rebounds, assists, steals, and blocks per game for this athlete in the 2006-07 season.",
        "answer": "y_references = [[7.5, 3.2, 1.0, 0.7]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Year', 'Team', 'GP', 'GS', 'MPG', 'FG%', '3P%', 'FT%', 'RPG', 'APG', 'SPG', 'BPG', 'PPG'], 'data': [['1993–94', 'Golden State', 76, 76, 32.1, 0.552, 0.0, 0.532, 9.1, 3.6, 1.2, '2.2', 17.5], ['1994–95', 'Washington', 54, 52, 38.3, 0.495, 0.276, 0.502, 9.6, 4.7, 1.5, '1.6', 20.1], ['1995–96', 'Washington', 15, 15, 37.2, 0.543, 0.441, 0.594, 7.6, 5.0, 1.8, '.6', 23.7], ['1996–97', 'Washington', 72, 72, 39.0, 0.518, 0.397, 0.565, 10.3, 4.6, 1.7, '1.9', 20.1], ['1997–98', 'Washington', 71, 71, 39.6, 0.482, 0.317, 0.589, 9.5, 3.8, 1.6, '1.7', 21.9], ['1998–99', 'Sacramento', 42, 42, 40.9, 0.486, 0.118, 0.454, 13.0, 4.1, 1.4, '2.1', 20.0], ['1999–00', 'Sacramento', 75, 75, 38.4, 0.483, 0.284, 0.751, 10.5, 4.6, 1.6, '1.7', 24.5], ['2000–01', 'Sacramento', 70, 70, 40.5, 0.481, 0.071, 0.703, 11.1, 4.2, 1.3, '1.7', 27.1], ['2001–02', 'Sacramento', 54, 54, 38.4, 0.495, 0.263, 0.749, 10.1, 4.8, 1.7, '1.4', 24.5], ['2002–03', 'Sacramento', 67, 67, 39.1, 0.461, 0.238, 0.607, 10.5, 5.4, 1.6, '1.3', 23.0], ['2003–04', 'Sacramento', 23, 23, 36.1, 0.413, 0.2, 0.711, 8.7, 4.6, 1.3, '.9', 18.7], ['2004–05', 'Sacramento', 46, 46, 36.3, 0.449, 0.379, 0.799, 9.7, 5.5, 1.5, '.7', 21.3], ['2004–05', 'Philadelphia', 21, 21, 33.4, 0.391, 0.267, 0.776, 7.9, 3.1, 1.2, '.9', 15.6], ['2005–06', 'Philadelphia', 75, 75, 38.6, 0.434, 0.273, 0.756, 9.9, 3.4, 1.4, '.8', 20.2], ['2006–07', 'Philadelphia', 18, 18, 30.2, 0.387, 0.4, 0.643, 8.3, 3.4, 1.0, '.8', 11.0], ['2006–07', 'Detroit', 43, 42, 29.7, 0.489, 0.333, 0.636, 6.7, 3.0, 1.0, '.6', 11.3], ['2007–08', 'Golden State', 9, 8, 14.0, 0.484, 0.0, 0.417, 3.6, 2.0, 0.4, '.7', 3.9], ['Career', None, 831, 827, 37.1, 0.479, 0.299, 0.649, 9.8, 4.2, 1.4, '1.4', 20.7], ['All-Star', None, 4, 4, 19.0, 0.371, 0.333, 0.375, 6.0, 3.3, 1.0, '-', 7.5]]}\n\nLet's get start!\nQuestion: Please help me draw a radar chart, showing the average rebounds, assists, steals, and blocks per game for this athlete in the 2006-07 season.\n"
    },
    {
        "id": "0e5d24e99ce2be597d1da273d8d0ed83",
        "file_name": "0e5d24e99ce2be597d1da273d8d0ed83.csv",
        "question": "Please help me draw a bar chart that displays the population density of the top 10 regions listed in this table.",
        "answer": "y_references = [[3954.93, 2520.11, 2481.6, 2382.95, 1980.22, 1552.02, 1355.57, 1209.52, 1130.2, 842.56]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Name', 'County', 'Population\\n(2012 est.)', 'Population\\n(2010)', 'Land area'], 'data': [['Aberdeen', 'Grays Harbor', '16,529', '16,896', '10.65 sq mi (27.6 km2)'], ['Airway Heights', 'Spokane', '6,363', '6,114', '5.63 sq mi (14.6 km2)'], ['Algona', 'King', '3,074', '3,015', '1.29 sq mi (3.3 km2)'], ['Anacortes', 'Skagit', '15,928', '15,778', '11.75 sq mi (30.4 km2)'], ['Arlington', 'Snohomish', '18,317', '17,926', '9.25 sq mi (24.0 km2)'], ['Asotin', 'Asotin', '1,270', '1,251', '1.05 sq mi (2.7 km2)'], ['Auburn', 'King\\nPierce', '73,505', '70,180', '29.62 sq mi (76.7 km2)'], ['Bainbridge Island', 'Kitsap', '23,263', '23,025', '27.61 sq mi (71.5 km2)'], ['Battle Ground', 'Clark', '18,044', '17,571', '7.16 sq mi (18.5 km2)'], ['Bellevue', 'King', '126,439', '122,363', '31.97 sq mi (82.8 km2)'], ['Bellingham', 'Whatcom', '82,234', '80,885', '27.08 sq mi (70.1 km2)'], ['Benton City', 'Benton', '3,134', '3,038', '2.46 sq mi (6.4 km2)'], ['Bingen', 'Klickitat', '724', '712', '0.62 sq mi (1.6 km2)'], ['Black Diamond', 'King', '4,237', '4,151', '6.01 sq mi (15.6 km2)'], ['Blaine', 'Whatcom', '4,744', '4,684', '5.63 sq mi (14.6 km2)'], ['Bonney Lake', 'Pierce', '17,964', '17,374', '7.94 sq mi (20.6 km2)'], ['Bothell', 'King\\nSnohomish', '34,651', '33,505', '12.11 sq mi (31.4 km2)'], ['Bremerton', 'Kitsap', '39,251', '37,729', '28.41 sq mi (73.6 km2)'], ['Brewster', 'Okanogan', '2,386', '2,370', '1.19 sq mi (3.1 km2)'], ['Bridgeport', 'Douglas', '2,444', '2,409', '1.05 sq mi (2.7 km2)'], ['Brier', 'Snohomish', '6,251', '6,087', '2.13 sq mi (5.5 km2)'], ['Buckley', 'Pierce', '4,402', '4,354', '3.87 sq mi (10.0 km2)'], ['Burien', 'King', '49,410', '33,313', '7.42 sq mi (19.2 km2)'], ['Burlington', 'Skagit', '8,470', '8,388', '4.26 sq mi (11.0 km2)'], ['Camas', 'Clark', '20,490', '19,355', '13.49 sq mi (34.9 km2)'], ['Carnation', 'King', '1,823', '1,786', '1.16 sq mi (3.0 km2)'], ['Cashmere', 'Chelan', '3,104', '3,063', '1.03 sq mi (2.7 km2)'], ['Castle Rock', 'Cowlitz', '1,983', '1,982', '1.59 sq mi (4.1 km2)'], ['Centralia', 'Lewis', '16,505', '16,336', '7.42 sq mi (19.2 km2)'], ['Chehalis', 'Lewis', '7,298', '7,259', '5.53 sq mi (14.3 km2)'], ['Chelan', 'Chelan', '3,945', '3,890', '6.29 sq mi (16.3 km2)'], ['Cheney', 'Spokane', '11,018', '10,590', '4.27 sq mi (11.1 km2)'], ['Chewelah', 'Stevens', '2,606', '2,607', '2.98 sq mi (7.7 km2)'], ['Clarkston', 'Asotin', '7,283', '7,229', '2.01 sq mi (5.2 km2)'], ['Cle Elum', 'Kittitas', '1,907', '1,872', '3.82 sq mi (9.9 km2)'], ['Clyde Hill', 'King', '3,047', '2,984', '1.06 sq mi (2.7 km2)'], ['Colfax', 'Whitman', '2,839', '2,805', '3.79 sq mi (9.8 km2)'], ['College Place', 'Walla Walla', '8,884', '8,765', '2.66 sq mi (6.9 km2)'], ['Colville', 'Stevens', '4,669', '4,673', '2.93 sq mi (7.6 km2)'], ['Connell', 'Franklin', '5,421', '4,209', '7.87 sq mi (20.4 km2)'], ['Cosmopolis', 'Grays Harbor', '1,643', '1,649', '1.33 sq mi (3.4 km2)'], ['Covington', 'King', '18,298', '17,575', '5.86 sq mi (15.2 km2)'], ['Davenport', 'Lincoln', '1,718', '1,734', '1.82 sq mi (4.7 km2)'], ['Dayton', 'Columbia', '2,509', '2,526', '1.43 sq mi (3.7 km2)'], ['Deer Park', 'Spokane', '3,673', '3,652', '6.88 sq mi (17.8 km2)'], ['Des Moines', 'King', '30,449', '29,673', '6.50 sq mi (16.8 km2)'], ['DuPont', 'Pierce', '8,808', '8,199', '5.86 sq mi (15.2 km2)'], ['Duvall', 'King', '7,183', '6,695', '2.47 sq mi (6.4 km2)'], ['East Wenatchee', 'Douglas', '13,439', '13,190', '3.80 sq mi (9.8 km2)'], ['Edgewood', 'Pierce', '9,501', '9,387', '8.41 sq mi (21.8 km2)'], ['Edmonds', 'Snohomish', '40,400', '39,709', '8.91 sq mi (23.1 km2)'], ['Electric City', 'Grant', '1,004', '968', '1.70 sq mi (4.4 km2)'], ['Ellensburg', 'Kittitas', '18,348', '18,174', '6.92 sq mi (17.9 km2)'], ['Elma', 'Grays Harbor', '3,095', '3,107', '1.89 sq mi (4.9 km2)'], ['Entiat', 'Chelan', '1,129', '1,112', '2.11 sq mi (5.5 km2)'], ['Enumclaw', 'King\\nPierce', '11,327', '10,669', '4.26 sq mi (11.0 km2)'], ['Ephrata', 'Grant', '7,916', '7,664', '10.09 sq mi (26.1 km2)'], ['Everett', 'Snohomish', '104,655', '103,019', '33.45 sq mi (86.6 km2)'], ['Everson', 'Whatcom', '2,513', '2,481', '1.24 sq mi (3.2 km2)'], ['Federal Way', 'King', '91,933', '89,306', '22.26 sq mi (57.7 km2)'], ['Ferndale', 'Whatcom', '11,998', '11,415', '6.61 sq mi (17.1 km2)'], ['Fife', 'Pierce', '9,333', '9,173', '5.68 sq mi (14.7 km2)'], ['Fircrest', 'Pierce', '6,579', '6,497', '1.58 sq mi (4.1 km2)'], ['Forks', 'Clallam', '3,552', '3,532', '3.65 sq mi (9.5 km2)'], ['George', 'Grant', '514', '501', '1.33 sq mi (3.4 km2)'], ['Gig Harbor', 'Pierce', '7,549', '7,126', '5.95 sq mi (15.4 km2)'], ['Gold Bar', 'Snohomish', '2,101', '2,075', '1.03 sq mi (2.7 km2)'], ['Goldendale', 'Klickitat', '3,471', '3,407', '2.52 sq mi (6.5 km2)'], ['Grand Coulee', 'Grant', '1,044', '988', '1.19 sq mi (3.1 km2)'], ['Grandview', 'Yakima', '11,012', '10,862', '6.23 sq mi (16.1 km2)'], ['Granger', 'Yakima', '3,298', '3,246', '1.79 sq mi (4.6 km2)'], ['Granite Falls', 'Snohomish', '3,416', '3,364', '2.18 sq mi (5.6 km2)'], ['Harrington', 'Lincoln', '420', '424', '0.38 sq mi (0.98 km2)'], ['Hoquiam', 'Grays Harbor', '8,535', '8,726', '9.02 sq mi (23.4 km2)'], ['Ilwaco', 'Pacific', '936', '936', '2.10 sq mi (5.4 km2)'], ['Issaquah', 'King', '32,633', '30,434', '11.38 sq mi (29.5 km2)'], ['Kahlotus', 'Franklin', '204', '193', '0.47 sq mi (1.2 km2)'], ['Kalama', 'Cowlitz', '2,346', '2,344', '2.77 sq mi (7.2 km2)'], ['Kelso', 'Cowlitz', '11,832', '11,925', '8.14 sq mi (21.1 km2)'], ['Kenmore', 'King', '21,280', '20,460', '6.15 sq mi (15.9 km2)'], ['Kennewick', 'Benton', '75,971', '73,917', '26.93 sq mi (69.7 km2)'], ['Kent', 'King', '122,999', '92,411', '28.63 sq mi (74.2 km2)'], ['Kettle Falls', 'Stevens', '1,593', '1,595', '1.07 sq mi (2.8 km2)'], ['Kirkland', 'King', '50,697', '48,787', '10.79 sq mi (27.9 km2)'], ['Kittitas', 'Kittitas', '1,405', '1,381', '0.76 sq mi (2.0 km2)'], ['La Center', 'Clark', '2,852', '2,800', '1.27 sq mi (3.3 km2)'], ['Lacey', 'Thurston', '43,860', '42,393', '16.06 sq mi (41.6 km2)'], ['Lake Forest Park', 'King', '12,972', '12,598', '3.53 sq mi (9.1 km2)'], ['Lake Stevens', 'Snohomish', '29,104', '28,069', '8.88 sq mi (23.0 km2)'], ['Lakewood', 'Pierce', '58,852', '58,163', '17.17 sq mi (44.5 km2)'], ['Langley', 'Island', '1,041', '1,035', '1.08 sq mi (2.8 km2)'], ['Leavenworth', 'Chelan', '1,993', '1,965', '1.23 sq mi (3.2 km2)'], ['Liberty Lake', 'Spokane', '7,889', '7,591', '6.14 sq mi (15.9 km2)'], ['Long Beach', 'Pacific', '1,393', '1,392', '1.35 sq mi (3.5 km2)'], ['Longview', 'Cowlitz', '36,458', '36,648', '14.48 sq mi (37.5 km2)'], ['Lynden', 'Whatcom', '12,605', '11,951', '5.17 sq mi (13.4 km2)'], ['Lynnwood', 'Snohomish', '36,275', '35,836', '7.84 sq mi (20.3 km2)'], ['Mabton', 'Yakima', '2,324', '2,286', '0.80 sq mi (2.1 km2)'], ['Maple Valley', 'King', '24,171', '22,684', '5.72 sq mi (14.8 km2)'], ['Marysville', 'Snohomish', '62,402', '60,020', '20.68 sq mi (53.6 km2)'], ['Mattawa', 'Grant', '4,543', '4,437', '0.74 sq mi (1.9 km2)'], ['McCleary', 'Grays Harbor', '1,647', '1,653', '2.05 sq mi (5.3 km2)'], ['Medical Lake', 'Spokane', '4,940', '5,060', '3.40 sq mi (8.8 km2)'], ['Medina', 'King', '3,029', '2,969', '1.44 sq mi (3.7 km2)'], ['Mercer Island', 'King', '23,661', '22,699', '6.32 sq mi (16.4 km2)'], ['Mesa', 'Franklin', '518', '489', '1.64 sq mi (4.2 km2)'], ['Mill Creek', 'Snohomish', '18,671', '18,244', '4.67 sq mi (12.1 km2)'], ['Millwood', 'Spokane', '1,797', '1,786', '0.70 sq mi (1.8 km2)'], ['Milton', 'Pierce\\nKing', '7,048', '6,968', '2.51 sq mi (6.5 km2)'], ['Monroe', 'Snohomish', '17,503', '17,304', '6.05 sq mi (15.7 km2)'], ['Montesano', 'Grays Harbor', '3,962', '3,976', '10.41 sq mi (27.0 km2)'], ['Morton', 'Lewis', '1,132', '1,126', '0.82 sq mi (2.1 km2)'], ['Moses Lake', 'Grant', '21,182', '20,366', '15.75 sq mi (40.8 km2)'], ['Mossyrock', 'Lewis', '764', '759', '0.68 sq mi (1.8 km2)'], ['Mount Vernon', 'Skagit', '32,287', '31,743', '12.30 sq mi (31.9 km2)'], ['Mountlake Terrace', 'Snohomish', '20,198', '19,909', '4.06 sq mi (10.5 km2)'], ['Moxee', 'Yakima', '3,361', '3,308', '1.69 sq mi (4.4 km2)'], ['Mukilteo', 'Snohomish', '20,605', '20,254', '6.40 sq mi (16.6 km2)'], ['Napavine', 'Lewis', '1,778', '1,766', '2.38 sq mi (6.2 km2)'], ['Newcastle', 'King', '10,792', '10,380', '4.45 sq mi (11.5 km2)'], ['Newport', 'Pend Oreille', '2,116', '2,126', '1.07 sq mi (2.8 km2)'], ['Nooksack', 'Whatcom', '1,355', '1,338', '0.70 sq mi (1.8 km2)'], ['Normandy Park', 'King', '6,504', '6,335', '2.52 sq mi (6.5 km2)'], ['North Bend', 'King', '6,030', '5,731', '4.27 sq mi (11.1 km2)'], ['North Bonneville', 'Skamania', '963', '956', '2.41 sq mi (6.2 km2)'], ['Oak Harbor', 'Island', '22,260', '22,075', '9.42 sq mi (24.4 km2)'], ['Oakville', 'Grays Harbor', '682', '684', '0.50 sq mi (1.3 km2)'], ['Ocean Shores', 'Grays Harbor', '5,622', '5,569', '8.51 sq mi (22.0 km2)'], ['Okanogan', 'Okanogan', '2,568', '2,552', '1.95 sq mi (5.1 km2)'], ['Olympia', 'Thurston', '47,698', '46,478', '17.82 sq mi (46.2 km2)'], ['Omak', 'Okanogan', '4,881', '4,845', '3.50 sq mi (9.1 km2)'], ['Oroville', 'Okanogan', '1,698', '1,686', '1.64 sq mi (4.2 km2)'], ['Orting', 'Pierce', '6,872', '6,746', '2.73 sq mi (7.1 km2)'], ['Othello', 'Adams', '7,532', '7,364', '3.81 sq mi (9.9 km2)'], ['Pacific', 'King\\nPierce', '6,838', '6,606', '2.42 sq mi (6.3 km2)'], ['Palouse', 'Whitman', '1,011', '998', '1.08 sq mi (2.8 km2)'], ['Pasco', 'Franklin', '65,398', '59,781', '30.50 sq mi (79.0 km2)'], ['Pateros', 'Okanogan', '673', '667', '0.49 sq mi (1.3 km2)'], ['Pomeroy', 'Garfield', '1,422', '1,425', '1.78 sq mi (4.6 km2)'], ['Port Angeles', 'Clallam', '19,056', '19,038', '10.70 sq mi (27.7 km2)'], ['Port Orchard', 'Kitsap', '11,680', '11,144', '7.24 sq mi (18.8 km2)'], ['Port Townsend', 'Jefferson', '9,117', '9,113', '6.98 sq mi (18.1 km2)'], ['Poulsbo', 'Kitsap', '9,393', '9,200', '4.67 sq mi (12.1 km2)'], ['Prescott', 'Walla Walla', '323', '318', '0.40 sq mi (1.0 km2)'], ['Prosser', 'Benton', '5,799', '5,714', '4.49 sq mi (11.6 km2)'], ['Pullman', 'Whitman', '31,359', '29,799', '9.88 sq mi (25.6 km2)'], ['Puyallup', 'Pierce', '38,147', '37,022', '13.93 sq mi (36.1 km2)'], ['Quincy', 'Grant', '7,013', '6,750', '4.96 sq mi (12.8 km2)'], ['Rainier', 'Thurston', '1,826', '1,794', '1.73 sq mi (4.5 km2)'], ['Raymond', 'Pacific', '2,883', '2,882', '4.06 sq mi (10.5 km2)'], ['Redmond', 'King', '56,561', '54,144', '16.28 sq mi (42.2 km2)'], ['Renton', 'King', '95,448', '90,927', '23.12 sq mi (59.9 km2)'], ['Republic', 'Ferry', '1,093', '1,073', '1.59 sq mi (4.1 km2)'], ['Richland', 'Benton', '51,440', '48,058', '35.72 sq mi (92.5 km2)'], ['Ridgefield', 'Clark', '5,260', '4,763', '7.08 sq mi (18.3 km2)'], ['Ritzville', 'Adams', '1,699', '1,673', '1.70 sq mi (4.4 km2)'], ['Rock Island', 'Douglas', '799', '788', '0.61 sq mi (1.6 km2)'], ['Roslyn', 'Kittitas', '910', '893', '4.37 sq mi (11.3 km2)'], ['Roy', 'Pierce', '803', '793', '0.49 sq mi (1.3 km2)'], ['Royal City', 'Grant', '2,193', '2,140', '1.35 sq mi (3.5 km2)'], ['Ruston', 'Pierce', '759', '749', '0.26 sq mi (0.67 km2)'], ['Sammamish', 'King', '49,069', '45,780', '18.22 sq mi (47.2 km2)'], ['SeaTac', 'King', '27,667', '26,909', '10.03 sq mi (26.0 km2)'], ['Seattle', 'King', '634,535', '608,660', '83.94 sq mi (217.4 km2)'], ['Sedro-Woolley', 'Skagit', '10,636', '10,540', '3.81 sq mi (9.9 km2)'], ['Selah', 'Yakima', '7,333', '7,147', '4.44 sq mi (11.5 km2)'], ['Sequim', 'Clallam', '6,624', '6,606', '6.31 sq mi (16.3 km2)'], ['Shelton', 'Mason', '9,800', '9,834', '5.76 sq mi (14.9 km2)'], ['Shoreline', 'King', '54,352', '53,007', '11.67 sq mi (30.2 km2)'], ['Snohomish', 'Snohomish', '9,275', '9,098', '3.44 sq mi (8.9 km2)'], ['Snoqualmie', 'King', '11,594', '10,670', '6.40 sq mi (16.6 km2)'], ['Soap Lake', 'Grant', '1,550', '1,514', '1.25 sq mi (3.2 km2)'], ['South Bend', 'Pacific', '1,631', '1,637', '1.62 sq mi (4.2 km2)'], ['Spangle', 'Spokane', '280', '278', '0.36 sq mi (0.93 km2)'], ['Spokane', 'Spokane', '209,525', '208,916', '59.25 sq mi (153.5 km2)'], ['Spokane Valley', 'Spokane', '90,641', '89,755', '37.77 sq mi (97.8 km2)'], ['Sprague', 'Lincoln', '441', '446', '0.63 sq mi (1.6 km2)'], ['Stanwood', 'Snohomish', '6,422', '6,231', '2.82 sq mi (7.3 km2)'], ['Stevenson', 'Skamania', '1,473', '1,465', '1.64 sq mi (4.2 km2)'], ['Sultan', 'Snohomish', '4,710', '4,651', '3.15 sq mi (8.2 km2)'], ['Sumas', 'Whatcom', '1,325', '1,307', '1.48 sq mi (3.8 km2)'], ['Sumner', 'Pierce', '9,541', '9,451', '7.51 sq mi (19.5 km2)'], ['Sunnyside', 'Yakima', '16,054', '15,858', '6.63 sq mi (17.2 km2)'], ['Tacoma', 'Pierce', '202,010', '198,397', '49.72 sq mi (128.8 km2)'], ['Tekoa', 'Whitman', '787', '778', '1.14 sq mi (3.0 km2)'], ['Tenino', 'Thurston', '1,724', '1,695', '1.44 sq mi (3.7 km2)'], ['Tieton', 'Yakima', '1,211', '1,191', '0.82 sq mi (2.1 km2)'], ['Toledo', 'Lewis', '729', '725', '0.40 sq mi (1.0 km2)'], ['Tonasket', 'Okanogan', '1,038', '1,032', '0.80 sq mi (2.1 km2)'], ['Toppenish', 'Yakima', '9,017', '8,949', '2.09 sq mi (5.4 km2)'], ['Tukwila', 'King', '19,611', '19,107', '9.17 sq mi (23.8 km2)'], ['Tumwater', 'Thurston', '18,102', '17,371', '14.32 sq mi (37.1 km2)'], ['Union Gap', 'Yakima', '6,060', '6,047', '5.05 sq mi (13.1 km2)'], ['University Place', 'Pierce', '31,562', '31,144', '8.42 sq mi (21.8 km2)'], ['Vader', 'Lewis', '626', '621', '0.93 sq mi (2.4 km2)'], ['Vancouver', 'Clark', '165,489', '161,791', '46.46 sq mi (120.3 km2)'], ['Waitsburg', 'Walla Walla', '1,235', '1,217', '1.11 sq mi (2.9 km2)'], ['Walla Walla', 'Walla Walla', '31,864', '31,731', '12.80 sq mi (33.2 km2)'], ['Wapato', 'Yakima', '5,065', '4,997', '1.17 sq mi (3.0 km2)'], ['Warden', 'Grant', '2,758', '2,692', '2.58 sq mi (6.7 km2)'], ['Washougal', 'Clark', '14,584', '14,095', '5.42 sq mi (14.0 km2)'], ['Wenatchee', 'Chelan', '32,562', '31,925', '7.77 sq mi (20.1 km2)'], ['West Richland', 'Benton', '12,663', '11,811', '21.92 sq mi (56.8 km2)'], ['Westport', 'Grays Harbor', '2,092', '2,099', '3.70 sq mi (9.6 km2)'], ['White Salmon', 'Klickitat', '2,266', '2,224', '1.22 sq mi (3.2 km2)'], ['Winlock', 'Lewis', '1,346', '1,339', '1.29 sq mi (3.3 km2)'], ['Woodinville', 'King', '11,234', '10,938', '5.60 sq mi (14.5 km2)'], ['Woodland', 'Cowlitz\\nClark', '5,540', '5,509', '3.37 sq mi (8.7 km2)'], ['Woodway', 'Snohomish', '1,324', '1,307', '1.11 sq mi (2.9 km2)'], ['Yakima', 'Yakima', '93,101', '91,067', '27.18 sq mi (70.4 km2)'], ['Yelm', 'Thurston', '7,121', '6,848', '5.68 sq mi (14.7 km2)'], ['Zillah', 'Yakima', '3,011', '2,964', '1.78 sq mi (4.6 km2)']]}\n\nLet's get start!\nQuestion: Please help me draw a bar chart that displays the population density of the top 10 regions listed in this table.\n"
    },
    {
        "id": "0f41d5fef6881d303cee5f6a37993555",
        "file_name": "0f41d5fef6881d303cee5f6a37993555.csv",
        "question": "Please help me draw a line chart showing the trend in the maximum building height in the city over different time periods",
        "answer": "y_references = [[48, 50, 73, 79, 104, 137, 241]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Name', 'Street address', 'Years as tallest', 'Height\\nft (m)', 'Floors'], 'data': [['Globe Building', '4th Street South', '1882–1886', '157 (48)', 8], ['Lumber Exchange Building', '10 5th Street South', '1886–1887', '165 (50)', 12], ['Industrial Exposition Building', 'Central Avenue Southeast and Main Street Southeast', '1887–1890', '240 (73)', 8], ['Metropolitan Building', '308 2nd Avenue South', '1890–1895', '258 (79)', 12], ['Minneapolis City Hall', '350 5th Street South', '1895–1929', '341 (104)', 14], ['Foshay Tower', '821 Marquette Avenue', '1929–1973', '448 (137)', 32], ['IDS Tower', '80 8th Street South', '1973–present', '792 (241)', 55]]}\n\nLet's get start!\nQuestion: Please help me draw a line chart showing the trend in the maximum building height in the city over different time periods\n"
    },
    {
        "id": "bf75201c615c8bb7f27ad1b146d5c447",
        "file_name": "bf75201c615c8bb7f27ad1b146d5c447.csv",
        "question": "Please help me draw a stacked bar chart showing the trends in domestic flight passenger count, international flight non-CIS passenger count, and CIS passenger count from 2000 to 2013.",
        "answer": "y_references = [[ 698957, 733022, 793295, 879665, 972287, 1006422, 1128489, 1486888, 1523102, 1290639, 1529245, 1856948, 1934016, 2180227 ],[ 155898, 186861, 239461, 297421, 429049, 429790, 488954, 683092, 815124, 727718, 1017509, 1184771, 1448765, 2112775 ],[ 75396, 108412, 150059, 158671, 152292, 130580, 147505, 175117, 191169, 150779, 202165, 314164, 439668, 0 ]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Year', 'Total\\npassengers', 'Passenger\\nChange', 'Domestic', 'International\\n(total)', 'International\\n(non-CIS)', 'CIS', 'Aircraft\\nLandings', 'Cargo\\n(tonnes)'], 'data': [[2000, '930 251', '+2%', '698 957', '231 294', '155 898', '75 396', '8 619', '18 344'], [2001, '1 028 295', '+10,5%', '733 022', '295 273', '186 861', '108 412', '9 062', '22 178'], [2002, '1 182 815', '+15,0%', '793 295', '389 520', '239 461', '150 059', '10 162', '20 153'], [2003, '1 335 757', '+12,9%', '879 665', '456 092', '297 421', '158 671', '10 092', '18 054'], [2004, '1 553 628', '+16,3%', '972 287', '581 341', '429 049', '152 292', '11 816', '20 457'], [2005, '1 566 792', '+0,8%', '1 006 422', '560 370', '429 790', '130 580', '11 877', '11 545'], [2006, '1 764 948', '+12,7%', '1 128 489', '636 459', '488 954', '147 505', '13 289', '15 519'], [2007, '2 345 097', '+32,9%', '1 486 888', '858 209', '683 092', '175 117', '16 767', '16 965'], [2008, '2 529 395', '+7,8%', '1 523 102', '1 006 293', '815 124', '191 169', '16 407', '17 142'], [2009, '2 169 136', '−14,2%', '1 290 639', '878 497', '727 718', '150 779', '13 798', '13 585'], [2010, '2 748 919', '+26,7%', '1 529 245', '1 219 674', '1 017 509', '202 165', '15 989', '22 946'], [2011, '3 355 883', '+22,1%', '1 856 948', '1 498 935', '1 184 771', '314 164', '20 142', '24 890'], [2012, '3 783 069', '+12.7%', '1 934 016', '1 849 053', '1 448 765', '439 668', '21 728', '25 866'], [2013, '4 293 002', '+13.5%', '2 180 227', '2 112 775', None, None, '25 728', '27 800']]}\n\nLet's get start!\nQuestion: Please help me draw a stacked bar chart showing the trends in domestic flight passenger count, international flight non-CIS passenger count, and CIS passenger count from 2000 to 2013.\n"
    },
    {
        "id": "a7f2932c5e2c34ae2d673fa9c9bb3e5c",
        "file_name": "a7f2932c5e2c34ae2d673fa9c9bb3e5c.csv",
        "question": "Please draw an appropriate chart showing the number of gold, silver, and bronze medals for each country.",
        "answer": "y_references = [[4, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],[6, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 1]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Rank', 'Nation', 'Gold', 'Silver', 'Bronze', 'Total'], 'data': [['1', 'Soviet Union (URS)', 4, 1, 6, 11], ['2', 'Yugoslavia (YUG)', 2, 0, 1, 3], ['3', 'West Germany (FRG)', 1, 1, 1, 3], ['4', 'Bulgaria (BUL)', 1, 1, 0, 2], ['4', 'Czechoslovakia (TCH)', 1, 1, 0, 2], ['4', 'East Germany (GDR)', 1, 1, 0, 2], ['4', 'Great Britain (GBR)', 1, 1, 0, 2], ['8', 'Norway (NOR)', 1, 0, 0, 1], ['8', 'Romania (ROU)', 1, 0, 0, 1], ['10', 'China (CHN)', 0, 1, 1, 2], ['11', 'Chile (CHI)', 0, 1, 0, 1], ['11', 'France (FRA)', 0, 1, 0, 1], ['11', 'Japan (JPN)', 0, 1, 0, 1], ['11', 'South Korea (KOR)', 0, 1, 0, 1], ['11', 'Sweden (SWE)', 0, 1, 0, 1], ['11', 'United States (USA)', 0, 1, 0, 1], ['17', 'Hungary (HUN)', 0, 0, 2, 2], ['18', 'Belgium (BEL)', 0, 0, 1, 1], ['18', 'Spain (ESP)', 0, 0, 1, 1], ['Total', 'Total', 13, 13, 13, 39]]}\n\nLet's get start!\nQuestion: Please draw an appropriate chart showing the number of gold, silver, and bronze medals for each country.\n"
    },
    {
        "id": "d6d1f7594c6772b9f7a3b8f4ae21d647",
        "file_name": "d6d1f7594c6772b9f7a3b8f4ae21d647.csv",
        "question": "Please draw a waterfall chart showing the trend in the team's attendance over time.",
        "answer": "y_references = [[5732, -1679, 8461, -8355, 2154, 2492, 745, -5050, -1, 11771, -11248, -188, 13492, -13359, 924, 1840]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Game', 'Date', 'Opponent', 'Location', 'Score', 'OT', 'Attendance', 'Record'], 'data': [[1, 'January 8, 2005', 'Philadelphia Wings', 'Arrowhead Pond', 'W 13–10', None, '5,732', '1–0'], [2, 'January 22, 2005', 'Rochester Knighthawks', 'Arrowhead Pond', 'L 11–15', None, '4,053', '1–1'], [3, 'January 28, 2005', '@ Minnesota Swarm', 'Xcel Energy Center', 'W 8–7', None, '12,514', '2–1'], [4, 'January 29, 2005', 'Calgary Roughnecks', 'Arrowhead Pond', 'L 12–13', None, '4,159', '2–2'], [5, 'February 4, 2005', '@ Arizona Sting', 'Jobing.com Arena', 'L 10–17', None, '6,313', '2–3'], [6, 'February 11, 2005', '@ Buffalo Bandits', 'HSBC Arena', 'L 9–20', None, '8,805', '2–4'], [7, 'February 18, 2005', '@ Calgary Roughnecks', 'Pengrowth Saddledome', 'L 15–18', None, '9,550', '2–5'], [8, 'March 4, 2005', 'Colorado Mammoth', 'Arrowhead Pond', 'L 12–13', None, '4,500', '2–6'], [9, 'March 13, 2005', 'Toronto Rock', 'Arrowhead Pond', 'L 6–14', None, '4,499', '2–7'], [10, 'March 19, 2005', '@ Colorado Mammoth', 'Pepsi Center', 'L 8–16', None, '16,270', '2–8'], [11, 'March 25, 2005', '@ San Jose Stealth', 'HP Pavilion at San Jose', 'L 14–15', None, '5,022', '2–9'], [12, 'March 26, 2005', 'San Jose Stealth', 'Arrowhead Pond', 'W 13–12', 'OT', '4,834', '3–9'], [13, 'April 2, 2005', '@ Colorado Mammoth', 'Pepsi Center', 'W 10–6', None, '18,326', '4–9'], [14, 'April 9, 2005', 'Minnesota Swarm', 'Arrowhead Pond', 'L 11–12', 'OT', '4,967', '4–10'], [15, 'April 15, 2005', 'Arizona Sting', 'Arrowhead Pond', 'L 12–14', None, '5,891', '4–11'], [16, 'April 16, 2005', '@ Arizona Sting', 'Jobing.com Arena', 'W 11–10', None, '7,731', '5–11']]}\n\nLet's get start!\nQuestion: Please draw a waterfall chart showing the trend in the team's attendance over time.\n"
    },
    {
        "id": "981a69b6740520bc07087f0d51cbd353",
        "file_name": "981a69b6740520bc07087f0d51cbd353.csv",
        "question": "Please draw a waterfall chart showing the trend in the viewership of the program.",
        "answer": "y_references = [[6574000.0, 94000.0, -181000.0, -778000.0, 628000.0, -1237000.0, 400000.0]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Year', 'Network', 'NASCAR\\nCountdown', 'Lap-by-lap', 'Color commentator(s)', 'Pit reporters', 'Ratings', 'Viewers'], 'data': [[2007, 'ESPN', 'Brent Musburger\\nSuzy Kolber\\nBrad Daugherty', 'Jerry Punch', 'Rusty Wallace\\nAndy Petree', 'Dave Burns\\nJamie Little\\nAllen Bestwick\\nMike Massaro', '4.2 (4.9 cable)', '6.574 million'], [2008, 'ESPN', 'Allen Bestwick\\nRusty Wallace\\nBrad Daugherty', 'Jerry Punch', 'Dale Jarrett\\nAndy Petree', 'Dave Burns\\nJamie Little\\nShannon Spake\\nMike Massaro', '4.3 (5.1 cable)', '6.668 million'], [2009, 'ESPN', 'Allen Bestwick\\nRusty Wallace\\nBrad Daugherty\\nRay Evernham', 'Jerry Punch', 'Dale Jarrett\\nAndy Petree', 'Dave Burns\\nJamie Little\\nShannon Spake\\nVince Welch', '4.1 (4.8 cable)', '6.487 million'], [2010, 'ESPN', 'Allen Bestwick\\nRusty Wallace\\nBrad Daugherty\\nRay Evernham', 'Marty Reid', 'Dale Jarrett\\nAndy Petree', 'Dave Burns\\nJamie Little\\nJerry Punch\\nVince Welch', '3.6 (4.2 cable)', '5.709 million'], [2011, 'ESPN', 'Nicole Briscoe\\nRusty Wallace\\nBrad Daugherty', 'Allen Bestwick', 'Dale Jarrett\\nAndy Petree', 'Dave Burns\\nJamie Little\\nJerry Punch\\nVince Welch', '4.0 (4.6 cable)', '6.337 million'], [2012, 'ESPN', 'Nicole Briscoe\\nRusty Wallace\\nBrad Daugherty\\nRay Evernham', 'Allen Bestwick', 'Dale Jarrett\\nAndy Petree', 'Dave Burns\\nJamie Little\\nJerry Punch\\nVince Welch', '3.3', '5.1 million'], [2013, 'ESPN', 'Nicole Briscoe\\nRusty Wallace\\nBrad Daugherty\\nRay Evernham', 'Allen Bestwick', 'Dale Jarrett\\nAndy Petree', 'Dave Burns\\nJamie Little\\nJerry Punch\\nVince Welch', '3.6', '5.5 million'], [2014, 'ESPN', None, None, None, None, None, None]]}\n\nLet's get start!\nQuestion: Please draw a waterfall chart showing the trend in the viewership of the program.\n"
    },
    {
        "id": "498ad888af0138fb83a16a69d424fde5",
        "file_name": "498ad888af0138fb83a16a69d424fde5.csv",
        "question": "Please draw a bar chart showing the number of times each club has won first and second place in the competition.",
        "answer": "y_references = [[6, 4, 3, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0],[2, 1, 2, 0, 1, 1, 1, 6, 1, 1, 1, 1, 1]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Club', 'Winners', 'Runner-ups', 'Winning Years', 'Runner-up Years'], 'data': [['FK Austria Wien', '6', 2, '1990, 1991, 1992, 1994, 2003, 2004', '1986, 1994'], ['SK Rapid Wien', '4', 1, '1986, 1987, 1988, 2008', '1995, 1996'], ['SK Sturm Graz', '3', 2, '1996, 1998, 1999', '1997, 2002'], ['SV Austria Salzburg', '3', 0, '1994, 1995, 1997', '–'], ['Grazer AK', '2', 1, '2000, 2002', '2004'], ['VfB Admira Wacker Mödling', '1', 1, '1989', '1992'], ['FC Kärnten', '1', 1, '2001', '2003'], ['FC Swarovski Tirol / FC Tirol Innsbruck', '0*', 6, '–', '1987, 1989, 1990, 1993, 2000, 2001'], ['Kremser SC', '0', 1, '–', '1988'], ['SV Stockerau', '0', 1, '–', '1991'], ['SV Ried', '0', 1, '–', '1998'], ['LASK Linz', '0', 1, '–', '1999'], ['SV Horn', '0', 1, '–', '2008']]}\n\nLet's get start!\nQuestion: Please draw a bar chart showing the number of times each club has won first and second place in the competition.\n"
    },
    {
        "id": "148dedc65365084819c4c9faddbe9be8",
        "file_name": "148dedc65365084819c4c9faddbe9be8.csv",
        "question": "Please draw a line chart showing the cumulative number of wins for the team.",
        "answer": "y_references = [[0, 1, 2, 3, 3, 3, 3, 4, 5, 6, 6, 7, 8, 8, 9, 9, 9, 9]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['#', 'Date', 'Venue', 'Opponent', 'Score', 'Result', 'Competition'], 'data': [[1.0, '24 December 2005', 'Phang Nga, Thailand', 'Latvia', '1–1', 'Draw', \"2005 King's Cup\"], [2.0, '26 March 2006', 'Chonburi, Thailand', 'Philippines', '5–0', 'Win', 'Friendly'], [3.0, '26 March 2006', 'Chonburi, Thailand', 'Philippines', '5–0', 'Win', 'Friendly'], [4.0, '8 October 2007', 'Bangkok, Thailand', 'Macau', '6–1', 'Win', '2010 FIFA World Cup Qualification'], [5.0, '6 February 2008', 'Saitama, Japan', 'Japan', '4–1', 'Loss', '2010 FIFA World Cup Qualification'], [6.0, '15 March 2008', 'Kunming, China', 'China PR', '3–3', 'Draw', 'Friendly'], [7.0, '15 March 2008', 'Kunming, China', 'China PR', '3–3', 'Draw', 'Friendly'], [8.0, '20 May 2008', 'Bangkok, Thailand', 'Nepal', '7–0', 'Win', 'Friendly'], [9.0, '20 May 2008', 'Bangkok, Thailand', 'Nepal', '7–0', 'Win', 'Friendly'], [10.0, '25 May 2008', 'Bangkok, Thailand', 'Iraq', '2–1', 'Win', 'Friendly'], [11.0, '2 June 2008', 'Bangkok, Thailand', 'Bahrain', '2–3', 'Loss', '2010 FIFA World Cup Qualification'], [12.0, '20 December 2008', 'Bangkok, Thailand', 'Indonesia', '2–1', 'Win', '2008 AFF Suzuki Cup'], [13.0, '18 July 2009', 'Bangkok, Thailand', 'Pakistan', '4–0', 'Win', 'Friendly'], [14.0, '8 November 2009', 'Bangkok, Thailand', 'Syria', '1–1', 'Draw', 'Friendly'], [15.0, '8 September 2010', 'New Delhi, India', 'India', '2–1', 'Win', 'Friendly'], [16.0, '15 January 2012', 'Bangkok, Thailand', 'South Korea', '1–3', 'Loss', \"2012 King's Cup\"], [17.0, '26 January 2013', 'Chiangmai, Thailand', 'North Korea', '2–2', 'Draw', \"2013 King's Cup\"], [18.0, '5 March 2014', 'Bangkok, Thailand', 'Lebanon', '2–5', 'Loss', '2015 AFC Asian Cup qualification']]}\n\nLet's get start!\nQuestion: Please draw a line chart showing the cumulative number of wins for the team.\n"
    },
    {
        "id": "4b2841ba16f37577872a2fba979e3733",
        "file_name": "4b2841ba16f37577872a2fba979e3733.csv",
        "question": "Please draw a stacked bar chart showing the match statistics for each team.",
        "answer": "y_references = [[23, 20, 23, 21, 16, 15, 17, 15, 13, 13, 14, 10, 13, 12, 9, 10, 11, 7, 7, 8],[11, 12, 6, 8, 11, 12, 8, 9, 13, 10, 8, 15, 8, 9, 15, 12, 10, 11, 10, 8],[4, 6, 9, 9, 11, 11, 13, 14, 12, 15, 16, 13, 17, 17, 14, 16, 17, 20, 21, 22]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Position', 'Club', 'Played', 'Points', 'Wins', 'Draws', 'Losses', 'Goals for', 'Goals against', 'Goal Difference'], 'data': [[1, 'UE Lleida', 38, '57+19', 23, 11, 4, 56, 20, 36], [2, 'Real Valladolid', 38, '52+14', 20, 12, 6, 50, 30, 20], [3, 'Racing de Santander', 38, '52+14', 23, 6, 9, 56, 38, 18], [4, 'RCD Mallorca', 38, '50+12', 21, 8, 9, 57, 34, 23], [5, 'Real Betis', 38, '43+5', 16, 11, 11, 49, 33, 16], [6, 'Real Madrid B', 38, '42+4', 15, 12, 11, 57, 41, 16], [7, 'Atlético Marbella', 38, '42+4', 17, 8, 13, 45, 41, 4], [8, 'Barcelona B', 38, '39+1', 15, 9, 14, 59, 55, 4], [9, 'CP Mérida', 38, '39+1', 13, 13, 12, 43, 42, 1], [10, 'CD Castellón', 38, '36-2', 13, 10, 15, 40, 45, -5], [11, 'CD Badajoz', 38, '36-2', 14, 8, 16, 37, 36, 1], [12, 'SD Compostela', 38, '35-3', 10, 15, 13, 35, 39, -4], [13, 'Villarreal CF', 38, '34-4', 13, 8, 17, 38, 51, -14], [14, 'Palamós CF', 38, '33-5', 12, 9, 17, 33, 50, -17], [15, 'Athletic de Bilbao B', 38, '33-5', 9, 15, 14, 33, 34, -1], [16, 'SD Eibar', 38, '32-6', 10, 12, 16, 33, 44, -11], [17, 'UE Figueres', 38, '32-6', 11, 10, 17, 41, 59, -18], [18, 'CD Lugo', 38, '25-13', 7, 11, 20, 23, 41, -18], [19, 'Sestao', 38, '24-14', 7, 10, 21, 29, 54, -25], [20, 'CE Sabadell FC 1', 38, '24-14', 8, 8, 22, 30, 57, -27]]}\n\nLet's get start!\nQuestion: Please draw a stacked bar chart showing the match statistics for each team.\n"
    },
    {
        "id": "c6efb6d1181b8e94551ca81c9073a942",
        "file_name": "c6efb6d1181b8e94551ca81c9073a942.csv",
        "question": "Please draw a horizontal bar chart showing the tonnage of sunken ships in the table.",
        "answer": "y_references = [5995, 3256, 1930, 1908, 1213, 1188, 1179, 552]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Date', 'Name', 'Nationality', 'Tonnage\\n(GRT)', 'Fate'], 'data': [['18 January 1940', 'Flandria', 'Sweden', '1,179', 'Sunk'], ['19 January 1940', 'Patria', 'Sweden', '1,188', 'Sunk'], ['11 February 1940', 'Linda', 'Estonia', '1,213', 'Sunk'], ['4 May 1940', 'San Tiburcio', 'United Kingdom', '5,995', 'Sunk (mine)'], ['9 May 1940', 'Doris', 'French Navy', '552', 'Sunk'], ['11 May 1940', 'Tringa', 'United Kingdom', '1,930', 'Sunk'], ['11 May 1940', 'Viiu', 'Estonia', '1,908', 'Sunk'], ['23 May 1940', 'Sigurd Faulbaum', 'Belgium', '3,256', 'Sunk'], ['11 May 1944', 'Shtorm', 'Soviet Union', '412', 'Damaged']]}\n\nLet's get start!\nQuestion: Please draw a horizontal bar chart showing the tonnage of sunken ships in the table.\n"
    },
    {
        "id": "a6b59f9af78c3d51a9219fe299c43ca2",
        "file_name": "a6b59f9af78c3d51a9219fe299c43ca2.csv",
        "question": "Please draw a waterfall chart using the completion time of the first-place finisher as a baseline, showing the completion times of each participant in the competition",
        "answer": "y_references = [[0.0, 2.3, 2.44, 3.1, 3.41, 3.47, 3.76, 4.02, 4.05, 4.39, 4.71, 4.97, 5.09, 5.73, 0.0, 0.0]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Rank', 'Heat', 'Nation', 'Competitors', 'Time', 'Notes'], 'data': [[1.0, 2, 'United States', 'Kelly Willie, Derrick Brew, Andrew Rock, Darold Williamson', '2:59.30', 'Q'], [2.0, 2, 'Nigeria', 'James Godday, Musa Audu, Saul Weigopwa, Enefiok Udo-Obong', '3:01.60', 'Q, SB'], [3.0, 2, 'Bahamas', 'Andrae Williams, Dennis Darling, Nathaniel McKinney, Christopher Brown', '3:01.74', 'Q, SB'], [4.0, 1, 'Great Britain', 'Timothy Benjamin, Sean Baldock, Malachi Davis, Matthew Elias', '3:02.40', 'Q, SB'], [5.0, 1, 'Japan', 'Yuki Yamaguchi, Jun Osakada, Tomohiro Ito, Mitsuhiro Sato', '3:02.71', 'Q'], [6.0, 1, 'Germany', 'Ingo Schultz, Kamghe Gaba, Ruwen Faller, Bastian Swillims', '3:02.77', 'Q'], [7.0, 1, 'Australia', 'John Steffensen, Clinton Hill, Patrick Dwyer, Mark Ormrod', '3:03.06', 'q'], [8.0, 1, 'Botswana', 'Oganeditse Moseki, Johnson Kubisa, California Molefe, Kagiso Kilego', '3:03.32', 'q, SB'], [9.0, 2, 'Russia', 'Aleksandr Larin, Andrey Rudnitskiy, Oleg Mishukov, Ruslan Mashchenko', '3:03.35', None], [10.0, 2, 'Poland', 'Piotr Rysiukiewicz, Piotr Klimczak, Marcin Marciniszyn, Marek Plawgo', '3:03.69', None], [11.0, 2, 'Ukraine', 'Volodymyr Demchenko, Yevgeniy Zyukov, Myhaylo Knysh, Andriy Tverdostup', '3:04.01', None], [12.0, 1, 'Greece', 'Stilianos Dimotsios, Anastasios Gousis, Panagiotis Sarris, Periklis Iakovakis', '3:04.27', 'SB'], [13.0, 1, 'France', 'Ahmed Douhou, Ibrahima Wade, Abderrahim El Haouzy, Leslie Djhone', '3:04.39', None], [14.0, 2, 'Spain', 'Eduardo Ivan Rodriguez, David Canal, Luis Flores, Antonio Manuel Reina', '3:05.03', 'SB'], [None, 2, 'South Africa', 'Marcus la Grange, Hendrick Mokganyetsi, Ockert Cilliers, Arnaud Malherbe', 'DNF', None], [None, 1, 'Jamaica', 'Michael Campbell, Michael Blackwood, Jermaine Gonzales, Davian Clarke', 'DSQ', None]]}\n\nLet's get start!\nQuestion: Please draw a waterfall chart using the completion time of the first-place finisher as a baseline, showing the completion times of each participant in the competition\n"
    },
    {
        "id": "de91298e29cf142ece5d370e2687c1fc",
        "file_name": "de91298e29cf142ece5d370e2687c1fc.csv",
        "question": "Please draw a pie chart showing the racial composition of the region in the year 1948",
        "answer": "y_references = [358067, 110446, 17522, 55678, 20685, 39228]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Year', 'Total', 'Serbs', 'Hungarians', 'Germans', 'Romanians', 'Slovaks'], 'data': [[1910, '566,400', '229,568 (40.5%)', '108,622 (19.2%)', '125,374 (22.1%)', '73,303 (12.9%)', '16,223 (2,9%)'], [1921, '559,096', '235,148 (42.1%)', '98,463 (17.6%)', '126,519 (22.6%)', '66,433 (11,9%)', '17,595 (3,2%)'], [1931, '585,579', '261,123 (44,6%)', '95,867 (16,4%)', '120,541 (20,6%)', '62,365 (10,7%)', '17,900 (2,1%)'], [1948, '601,626', '358,067 (59,6%)', '110,446 (18,4%)', '17,522 (2,9%)', '55,678 (9,3%)', '20,685 (2,4%)'], [1953, '617,163', '374,258 (60,6%)', '112,683 (18,4%)', None, '55,094 (8,9%)', '21,299 (3,4%)'], [1961, '655,868', '423,837 (64,6%)', '111,944 (17,1%)', None, '54,447 (8,3%)', '22,306 (3,4%)'], [1971, '666,559', '434,810 (65,2%)', '103,090 (15.5%)', None, '49,455 (7,4%)', '22,173 (3,3%)'], [1981, '672,884', '424,765 (65,7%)', '90,445 (14,0%)', None, '43,474 (6,7%)', '21,392 (3,3%)'], [1991, '648,390', '423,475 (65,1%)', '76,153 (11.7%)', None, '35,935 (5,5%)', '19,903 (3.1%)'], [2002, '665,397', '477,890 (71.8%)', '63,047 (9.5%)', '908 (0,1%)', '27,661 (4,1%)', '17,994 (2,7%)']]}\n\nLet's get start!\nQuestion: Please draw a pie chart showing the racial composition of the region in the year 1948\n"
    },
    {
        "id": "7cfdc47e6cfdc865ffb5d0a9ddd1d380",
        "file_name": "7cfdc47e6cfdc865ffb5d0a9ddd1d380.csv",
        "question": "Please  draw a bar chart displaying the number of passengers for each city",
        "answer": "y_references = [[132046, 106513, 56069, 52584, 43419, 37526, 35507, 14906, 6928, 3619]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Rank', 'City', 'Passengers', 'Ranking', 'Airline'], 'data': [[1, 'Quintana Roo, Cancún', '132,046', None, 'Aeroméxico Connect, Interjet, Volaris'], [2, 'Nuevo León, Monterrey', '106,513', None, 'Aeroméxico Connect, Interjet'], [3, 'Guerrero, Acapulco', '56,069', None, 'Aeroméxico Connect, Interjet'], [4, 'Jalisco, Guadalajara', '52,584', None, 'Aeroméxico Connect, Volaris'], [5, 'Jalisco, Puerto Vallarta', '43,419', 1.0, 'Interjet'], [6, 'Baja California Sur, Los Cabos', '37,526', 1.0, 'Interjet'], [7, 'Guerrero, Ixtapa/Zihuatanejo', '35,507', None, 'Interjet'], [8, 'Baja California, Tijuana', '14,906', None, 'Interjet'], [9, 'Tabasco, Villahermosa', '6,928', 1.0, 'VivaAerobus'], [10, 'Tamaulipas, Tampico', '3,619', 1.0, 'VivaAerobus']]}\n\nLet's get start!\nQuestion: Please  draw a bar chart displaying the number of passengers for each city\n"
    },
    {
        "id": "186b646cdd698ceabbb2738e0e5e9e6b",
        "file_name": "186b646cdd698ceabbb2738e0e5e9e6b.csv",
        "question": "Please draw a radar chart displaying the performance of the painter Guercino in various aspects.",
        "answer": "y_references = [18, 10, 10, 4]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Painter', 'Composition', 'Drawing', 'Color', 'Expression'], 'data': [['Andrea del Sarto', '12', 16, 9, '8'], ['Federico Barocci', '14', 15, 6, '10'], ['Jacopo Bassano', '6', 8, 17, '0'], ['Giovanni Bellini', '4', 6, 14, 'O'], ['Sebastian Bourdon', '10', 8, 8, '4'], ['Charles Le Brun', '16', 16, 8, '16'], ['I Carracci', '15', 17, 13, '13'], [\"Cavalier D'Arpino\", '10', 10, 6, '2'], ['Correggio', '13', 13, 15, '12'], ['Daniele da Volterra', '12', 15, 5, '8'], ['Abraham van Diepenbeeck', '11', 10, 14, '6'], ['Il Domenichino', '15', 17, 9, '17'], ['Albrecht Dürer', '8', 10, 10, '8'], ['Giorgione', '8', 9, 18, '4'], ['Giovanni da Udine', '10', 8, 16, '3'], ['Giulio Romano', '15', 16, 4, '14'], ['Guercino', '18', 10, 10, '4'], ['Guido Reni', 'x', 13, 9, '12'], ['Holbein', '9', 10, 16, '3'], ['Jacob Jordaens', '10', 8, 16, '6'], ['Lucas Jordaens', '13', 12, 9, '6'], ['Giovanni Lanfranco', '14', 13, 10, '5'], ['Leonardo da Vinci', '15', 16, 4, '14'], ['Lucas van Leyden', '8', 6, 6, '4'], ['Michelangelo', '8', 17, 4, '8'], ['Caravaggio', '6', 6, 16, 'O'], ['Murillo', '6', 8, 15, '4'], ['Otho Venius', '13', 14, 10, '10'], ['Palma il Vecchio', '5', 6, 16, '0'], ['Palma il Giovane', '12', 9, 14, '6'], ['Il Parmigianino', '10', 15, 6, '6'], ['Gianfrancesco Penni', 'O', 15, 8, '0'], ['Perin del Vaga', '15', 16, 7, '6'], ['Sebastiano del Piombo', '8', 13, 16, '7'], ['Primaticcio', '15', 14, 7, '10'], ['Raphael', '17', 18, 12, '18'], ['Rembrandt', '15', 6, 17, '12'], ['Rubens', '18', 13, 17, '17'], ['Francesco Salviati', '13', 15, 8, '8'], ['Eustache Le Sueur', '15', 15, 4, '15'], ['Teniers', '15', 12, 13, '6'], ['Pietro Testa', '11', 15, 0, '6'], ['Tintoretto', '15', 14, 16, '4'], ['Titian', '12', 15, 18, '6'], ['Van Dyck', '15', 10, 17, '13'], ['Vanius', '15', 15, 12, '13'], ['Veronese', '15', 10, 16, '3'], ['Taddeo Zuccari', '13', 14, 10, '9'], ['Federico Zuccari', '10', 10, 8, '8']]}\n\nLet's get start!\nQuestion: Please draw a radar chart displaying the performance of the painter Guercino in various aspects.\n"
    },
    {
        "id": "3f2df3c4c7b0a42c92cd2ee6ef61ac49",
        "file_name": "3f2df3c4c7b0a42c92cd2ee6ef61ac49.csv",
        "question": "Please draw a line chart showing the Earnings received by the player from 2002 to 2010",
        "answer": "y_references = [101122, 277743, 579375, 702670, 1276265, 209610, 600326, 197818, 52464]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Year', 'Majors', 'ATP wins', 'Total wins', 'Earnings (US$)', 'Money list rank'], 'data': [['2002', 0, 0, 0, '101,122', 165.0], ['2003', 0, 0, 0, '277,743', 79.0], ['2004', 0, 0, 0, '579,375', 38.0], ['2005', 0, 1, 1, '702,670', 27.0], ['2006', 0, 2, 2, '1,276,265', 9.0], ['2007', 0, 0, 0, '209,610', 146.0], ['2008', 0, 0, 0, '600,326', 44.0], ['2009', 0, 0, 0, '197,818', 133.0], ['2010', 0, 0, 0, '52,464', 284.0], ['Career', 0, 3, 3, '4,024,686', None]]}\n\nLet's get start!\nQuestion: Please draw a line chart showing the Earnings received by the player from 2002 to 2010\n"
    },
    {
        "id": "83152b654dce2311e6036b3d951bfc77",
        "file_name": "83152b654dce2311e6036b3d951bfc77.csv",
        "question": "Please draw a bar chart showing the cumulative lengths at each stage of this competition",
        "answer": "y_references = [30.3, 42.22, 72.52, 86.88, 101.52, 116.12, 137.41, 144.16, 188.43, 201.14, 225.5, 231.48, 258.78, 259.92, 284.28, 311.58, 312.72, 356.99]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Leg', 'Stage', 'Time', 'Name', 'Length', 'Winner', 'Time.1', 'Avg. spd.', 'Rally leader'], 'data': [['1\\n(16 Feb)', 'SS1', '07:43', 'Loten 1', '30.30 km', 'M. Hirvonen', '16:14.1', '111.98 km/h', 'M. Hirvonen'], ['1\\n(16 Feb)', 'SS2', '08:34', 'Haslemoen', '11.92 km', 'S. Loeb', '8:08.4', '87.86 km/h', 'M. Hirvonen'], ['1\\n(16 Feb)', 'SS3', '11:24', 'Loten 2', '30.30 km', 'M. Hirvonen', '16:09.9', '112.47 km/h', 'M. Hirvonen'], ['1\\n(16 Feb)', 'SS4', '12:30', 'Grue', '14.36 km', 'S. Loeb', '7:31.8', '114.42 km/h', 'M. Hirvonen'], ['1\\n(16 Feb)', 'SS5', '13:52', 'Opaker', '14.64 km', 'J. Latvala', '7:59.8', '109.85 km/h', 'M. Hirvonen'], ['1\\n(16 Feb)', 'SS6', '14:36', 'Kongsvinger', '14.60 km', 'S. Loeb', '9:44.5', '89.92 km/h', 'M. Hirvonen'], ['1\\n(16 Feb)', 'SS7', '15:30', 'Finnskogen', '21.29 km', 'S. Loeb', '12:42.3', '100.54 km/h', 'M. Hirvonen'], ['1\\n(16 Feb)', 'SS8', '16:33', 'Kirkanaer', '6.75 km', 'S. Loeb', '5:48.9', '69.65 km/h', 'M. Hirvonen'], ['2\\n(17 Feb)', 'SS9', '08:09', 'Eleverum 1', '44.27 km', 'M. Hirvonen', '24:40.3', '107.66 km/h', 'M. Hirvonen'], ['2\\n(17 Feb)', 'SS10', '09:23', 'Terningmoen', '12.71 km', 'D. Sordo', '7:59.1', '95.5 km/h', 'M. Hirvonen'], ['2\\n(17 Feb)', 'SS11', '12:05', 'Mountain 1', '24.36 km', 'M. Hirvonen', '14:01.8', '104.18 km/h', 'M. Hirvonen'], ['2\\n(17 Feb)', 'SS12', '13:06', 'Lillehammar', '5.98 km', 'M. Grönholm', '4:33.9', '78.6 km/h', 'M. Hirvonen'], ['2\\n(17 Feb)', 'SS13', '14:00', 'Ringsaker 1', '27.30 km', 'M. Grönholm', '16:29.7', '99.3 km/h', 'M. Hirvonen'], ['2\\n(17 Feb)', 'SS14', '15:10', 'Hamar 1', '1.14 km', 'M. Grönholm', '1:13.8', '55.61 km/h', 'M. Hirvonen'], ['3\\n(18 Feb)', 'SS15', '08:08', 'Mountain 2', '24.36 km', 'S. Loeb', '13:18.2', '109.87 km/h', 'M. Hirvonen'], ['3\\n(18 Feb)', 'SS16', '08:55', 'Ringsaker 2', '27.30 km', 'H. Solberg', '15:28.6', '105.84 km/h', 'M. Hirvonen'], ['3\\n(18 Feb)', 'SS17', '10:05', 'Hamar 2', '1.14 km', 'X. Pons\\n S. Loeb\\n P. Solberg', '1:11.8', '57.16 km/h', 'M. Hirvonen'], ['3\\n(18 Feb)', 'SS18', '12:14', 'Eleverum 2', '44.27 km', 'M. Grönholm', '24:10.3', '109.89 km/h', 'M. Hirvonen']]}\n\nLet's get start!\nQuestion: Please draw a bar chart showing the cumulative lengths at each stage of this competition\n"
    },
    {
        "id": "b4eb57e9a160eb8d608dd549f1d97112",
        "file_name": "b4eb57e9a160eb8d608dd549f1d97112.csv",
        "question": "Please draw a stacked bar chart showing the number of wins and losses for this team in various matches",
        "answer": "y_references = [[9, 14, 12, 13, 11, 20, 11, 23, 20, 21, 19, 18, 20],[9, 2, 9, 5, 16, 7, 16, 4, 7, 7, 7, 3, 8]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['League', 'League.1', 'Position', 'Teams', 'Matches', 'Win', 'Lose'], 'data': [['V.League', '7th (2000-01)', '4th', 10, 18, 9, 9], ['V.League', '8th (2001-02)', '4th', 9, 16, 14, 2], ['V.League', '9th (2002-03)', '3rd', 8, 21, 12, 9], ['V.League', '10th (2003-04)', 'Runner-up', 10, 18, 13, 5], ['V.League', '11th (2004-05)', '8th', 10, 27, 11, 16], ['V.League', '12th (2005-06)', '4th', 10, 27, 20, 7], ['V・Premier', '2006-07', '6th', 10, 27, 11, 16], ['V・Premier', '2007-08', 'Champion', 10, 27, 23, 4], ['V・Premier', '2008-09', 'Champion', 10, 27, 20, 7], ['V・Premier', '2009-10', 'Champion', 8, 28, 21, 7], ['V・Premier', '2010-11', 'Runner-up', 8, 26, 19, 7], ['V・Premier', '2011-12', 'Champion', 8, 21, 18, 3], ['V・Premier', '2012-13', 'Runner-up', 8, 28, 20, 8]]}\n\nLet's get start!\nQuestion: Please draw a stacked bar chart showing the number of wins and losses for this team in various matches\n"
    },
    {
        "id": "10374c30d690bc6605ca2037c06541ef",
        "file_name": "10374c30d690bc6605ca2037c06541ef.csv",
        "question": "Draw a percentage stacked bar chart displaying the win-loss-draw percentages for each team",
        "answer": "y_references = [77.78, 77.78, 66.67, 61.11, 38.89, 33.33, 20.0, 26.67, 20.0, 6.67, 11.11, 5.56, 11.11, 16.67, 11.11, 5.56, 33.33, 13.33, 0.0, 0.0, 11.11, 16.67, 22.22, 22.22, 50.0, 61.11, 46.67, 60.0, 80.0, 93.33]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Position', 'Team', 'Points', 'Played', 'Won', 'Drawn', 'Lost', 'For', 'Against', 'Difference'], 'data': [[1, 'Paulistano', 30, 18, 14, 2, 2, 62, 19, 43], [2, 'Palestra Itália-SP', 29, 18, 14, 1, 3, 59, 21, 38], [3, 'Corinthians', 26, 18, 12, 2, 4, 51, 16, 35], [4, 'Ypiranga-SP', 25, 18, 11, 3, 4, 56, 34, 22], [5, 'AA São Bento', 16, 18, 7, 2, 9, 38, 44, -6], [6, 'Santos', 13, 18, 6, 1, 11, 36, 43, -7], [7, 'SC Internacional de São Paulo', 11, 15, 3, 5, 7, 26, 44, -18], [8, 'Minas Gerais', 10, 15, 4, 2, 9, 18, 49, -31], [9, 'AA das Palmeiras', 6, 15, 3, 0, 12, 27, 57, -30], [10, 'Mackenzie', 2, 15, 1, 0, 14, 11, 57, -46]]}\n\nLet's get start!\nQuestion: Draw a percentage stacked bar chart displaying the win-loss-draw percentages for each team\n"
    },
    {
        "id": "ac9369e40bb0b3a23bbb92a0bae9b678",
        "file_name": "ac9369e40bb0b3a23bbb92a0bae9b678.csv",
        "question": "Draw a grouped bar chart showing the maximum and minimum baselines for different Interferometer and observing modes.",
        "answer": "y_references = [[34, 4, 4, 10, 6, 10, 85, 0.5, 30, 5, 86, 5, 46, 46, 46, 12, 46, np.nan],[330, 60, 60, 65, 30, 50, 85, 9, 30, 300, 110, 640, 130, 130, 130, 200, 130, 200]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Interferometer and observing mode\\tWaveband\\tLimiting magnitude\\tMinimum baseline (m)\\\\n(un-projected)\\tMaximum baseline (m)\\tApprox. no. visibility measurements per year\\\\n(measurements per night x nights used per year)\\tMax ratio of no. phase / no. amplitude measurements\\\\n(measure of imaging performance', ' 0 = none)\\tAccuracy of amplitude2 measurements\\tAccuracy of phase measurements\\\\n(milli-radians)\\tNumber of spectral channels\\\\n(max in use simultaneously)\\tComments'], 'data': [[' H', ' K\\t8\\t34\\t330\\t7500\\t0.7\\t1%\\t10\\t30000\\tYes... 30000 in the visible band; maxiumum baseline 330-m'], [' No imaging on a single baseline instrument. CLOSED 2009.', None]]}\n\nLet's get start!\nQuestion: Draw a grouped bar chart showing the maximum and minimum baselines for different Interferometer and observing modes.\n"
    },
    {
        "id": "a289c37617f27573e8568ede1ef81561",
        "file_name": "a289c37617f27573e8568ede1ef81561.csv",
        "question": "Draw a pie chart depicting the proportions of cases for various infectious diseases in the year 1933",
        "answer": "y_references = [[800, 210, 12, 38, 6500]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['year', 'typhus', 'typhoid fever', 'relapsing fever', 'smallpox', 'malaria'], 'data': [[1913, 120, 424, 30, 67, '3600'], [191822, 1300, 293, 639, 106, '2940 (avg)'], [1929, 40, 170, 6, 8, '3000'], [1930, 60, 190, 5, 10, '2700'], [1931, 80, 260, 4, 30, '3200'], [1932, 220, 300, 12, 80, '4500'], [1933, 800, 210, 12, 38, '6500'], [1934, 410, 200, 10, 16, '9477'], [1935, 120, 140, 6, 4, '9924']]}\n\nLet's get start!\nQuestion: Draw a pie chart depicting the proportions of cases for various infectious diseases in the year 1933\n"
    },
    {
        "id": "effc38cfdbb5023b3a88c474e66e3f83",
        "file_name": "effc38cfdbb5023b3a88c474e66e3f83.csv",
        "question": "Draw a percentage bar chart that shows the percentage of total sales for each song in different regions",
        "answer": "y_references = [[43.48, 14.29, 23.53, 5.56, 18.6, 7.69, 11.54, 13.04, 14.29, 5.88, 16.67, 18.6, 15.38, 15.38, 8.7, 28.57, 17.65, 22.22, 9.3, 7.69, 23.08, 13.04, 22.86, 23.53, 13.89, 23.26, 7.69, 23.08, 8.7, 8.57, 23.53, 13.89, 18.6, 46.15, 3.85, 13.04, 11.43, 5.88, 27.78, 11.63, 15.38, 23.08]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['song', 'mobiles', 'northern ireland', 'northern england', 'scotland', 'southern england', 'wales', 'total'], 'data': [['groovy chick', 10, 3, 2, 3, 2, 3, 23], ['clear the air', 5, 5, 10, 8, 3, 4, 35], ['devil in a hood', 4, 1, 3, 4, 4, 1, 17], ['in my life', 2, 6, 8, 5, 5, 10, 36], ['how does it feel', 8, 8, 4, 10, 8, 5, 43], ['the girl', 1, 2, 1, 1, 6, 2, 13], ['about you', 3, 4, 6, 6, 1, 6, 26]]}\n\nLet's get start!\nQuestion: Draw a percentage bar chart that shows the percentage of total sales for each song in different regions\n"
    },
    {
        "id": "82f9c9423754f76241ef44ad06504164",
        "file_name": "82f9c9423754f76241ef44ad06504164.csv",
        "question": "Can you create a line chart that displays the company's operating revenue over the four quarters, with a separate line for 2018's operating revenue, to visualize the trend and comparison between the two years?",
        "answer": "y_references = [['$9,589', '$11,402', '$11,380', '$10,888'], ['$9,032', '$10,777', '$11,003', '$10,491']]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Row Header', 'Quarter Ended March 31 ', 'Quarter Ended June 30 ', 'Quarter Ended September 30 ', 'Quarter Ended December 31 '], 'data': [['Operating revenue', '$9,589', '$11,402', '$11,380', '$10,888'], ['Income from operations', '495', '1,472', '1,473', '861'], ['Net income', '292', '1,052', '1,024', '641'], ['Basic earnings per share', '1.09', '4.03', '4.01', '2.54'], ['Diluted earnings per share', '1.09', '4.02', '3.99', '2.53'], ['2018 Operating revenue', '$9,032', '$10,777', '$11,003', '$10,491'], ['2018 Income from operations (a)', '262', '1,145', '1,187', '635'], ['2018 Net income (a)', '145', '683', '833', '461'], ['2018 Basic earnings per share (a)', '0.51', '2.48', '3.06', '1.70'], ['2018 Diluted earnings per share (a)', '0.51', '2.48', '3.05', '1.69']]}\n\nLet's get start!\nQuestion: Can you create a line chart that displays the company's operating revenue over the four quarters, with a separate line for 2018's operating revenue, to visualize the trend and comparison between the two years?\n"
    },
    {
        "id": "1c5c0e7e18b6e11f8c7b9ef00ef8b137",
        "file_name": "1c5c0e7e18b6e11f8c7b9ef00ef8b137.csv",
        "question": "Could you create a bar chart to compare the total number of votes received by Obama and McCain in each county in New Mexico?",
        "answer": "y_references = [[168406, 659, 8160, 3176, 3465, 4655, 358, 38574, 7289, 8092, 1541, 256, 990, 5084, 3482, 5709, 4289, 15993, 2156, 8602, 1546, 11245, 2270, 17645, 10128, 32102, 53802, 2351, 4643, 13384, 3068, 492], [109212, 1396, 13630, 1717, 2800, 9585, 676, 27211, 12468, 5381, 615, 357, 934, 13301, 5906, 4986, 3857, 6183, 565, 12791, 2363, 3648, 4285, 27418, 2421, 24887, 15443, 3011, 3011, 2827, 3721, 1218]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['county', 'obama%', 'obama', 'mccain%', 'mccain', 'total'], 'data': [['bernalillo', '60.66%', 168406, '39.34%', 109212, 277618], ['catron', '32.07%', 659, '67.93%', 1396, 2055], ['chaves', '37.45%', 8160, '62.55%', 13630, 21790], ['cibola', '64.91%', 3176, '35.09%', 1717, 4893], ['colfax', '55.31%', 3465, '44.69%', 2800, 6265], ['curry', '32.69%', 4655, '67.31%', 9585, 14240], ['debaca', '34.62%', 358, '65.38%', 676, 1034], ['doã±a ana', '58.64%', 38574, '41.36%', 27211, 65785], ['eddy', '36.89%', 7289, '63.11%', 12468, 19757], ['grant', '60.06%', 8092, '39.94%', 5381, 13473], ['guadalupe', '71.47%', 1541, '28.53%', 615, 2156], ['harding', '41.76%', 256, '58.24%', 357, 613], ['hidalgo', '51.46%', 990, '48.54%', 934, 1924], ['lea', '27.65%', 5084, '72.35%', 13301, 18385], ['lincoln', '37.09%', 3482, '62.91%', 5906, 9388], ['los alamos', '53.38%', 5709, '46.62%', 4986, 10695], ['luna', '52.65%', 4289, '47.35%', 3857, 8146], ['mckinley', '72.12%', 15993, '27.88%', 6183, 22176], ['mora', '79.24%', 2156, '20.76%', 565, 2721], ['otero', '40.21%', 8602, '59.79%', 12791, 21393], ['quay', '39.55%', 1546, '60.45%', 2363, 3909], ['rio arriba', '75.51%', 11245, '24.49%', 3648, 14893], ['roosevelt', '34.63%', 2270, '65.37%', 4285, 6555], ['san juan', '39.16%', 17645, '60.84%', 27418, 45063], ['san miguel', '80.71%', 10128, '19.29%', 2421, 12549], ['sandoval', '56.33%', 32102, '43.67%', 24887, 56989], ['santa fe', '77.70%', 53802, '22.30%', 15443, 69245], ['sierra', '43.85%', 2351, '56.15%', 3011, 5362], ['socorro', '60.66%', 4643, '39.34%', 3011, 7654], ['taos', '82.56%', 13384, '17.44%', 2827, 16211], ['torrance', '45.19%', 3068, '54.81%', 3721, 6789], ['union', '28.77%', 492, '71.23%', 1218, 1710]]}\n\nLet's get start!\nQuestion: Could you create a bar chart to compare the total number of votes received by Obama and McCain in each county in New Mexico?\n"
    },
    {
        "id": "4f6dce1f412de0aafbf367e0f8b8bbb7",
        "file_name": "4f6dce1f412de0aafbf367e0f8b8bbb7.csv",
        "question": "Could you create a bar chart to show the top 5 counties with the highest total land area (in square miles), with each bar representing a county and its corresponding land area?",
        "answer": "y_references = [[192.944, 176.5, 142.016, 104.00200000000001, 103.255]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['township', 'county', 'pop (2010)', 'land ( sqmi )', 'water (sqmi)', 'latitude', 'longitude', 'geo id', 'ansi code'], 'data': [['tacoma', 'bottineau', 61, 39.385, 2.644, 48.668771, '- 100.852516', 3800977740, 1759300], ['taft', 'burleigh', 32, 35.809, 0.142, 46.771542, '- 100.258025', 3801577780, 1037068], ['talbot', 'bowman', 104, 35.822, 0.03, 46.166803, '- 103.304095', 3801177900, 1037226], ['tanner', 'kidder', 26, 34.098, 2.246, 46.758863, '- 99.506850', 3804377940, 1037057], ['tappen', 'kidder', 91, 34.677, 0.237, 46.841224, '- 99.647480', 3804378020, 2397881], ['tatman', 'ward', 2992, 35.922, 0.155, 48.418099, '- 101.249373', 3810178100, 1759694], ['taylor', 'sargent', 39, 36.03, 0.196, 45.979191, '- 97.696346', 3808178140, 1036786], ['taylor butte', 'adams', 14, 35.893, 0.006, 46.169023, '- 102.559886', 3800178220, 1037209], ['teddy', 'towner', 36, 35.847, 0.241, 48.747117, '- 99.077078', 3809578260, 1759667], ['telfer', 'burleigh', 74, 36.016, 0.062, 46.685192, '- 100.500785', 3801578300, 1759348], ['tepee butte', 'hettinger', 39, 35.799, 0.008, 46.415037, '- 102.735539', 3804178460, 1037233], ['tewaukon', 'sargent', 54, 37.499, 1.536, 45.976518, '- 97.426205', 3808178500, 1036784], ['thelma', 'burleigh', 17, 34.163, 1.942, 46.74648, '- 100.111760', 3801578580, 1037070], ['thingvalla', 'pembina', 101, 36.032, 0.009, 48.677597, '- 97.848487', 3806778620, 1036722], ['thordenskjold', 'barnes', 67, 35.623, 0.005, 46.668028, '- 97.874181', 3800378700, 1036401], ['thorson', 'burke', 26, 35.552, 0.355, 48.691017, '- 102.790846', 3801378780, 1037112], ['tiber', 'walsh', 72, 35.805, 0.093, 48.503371, '- 97.981576', 3809978820, 1036549], ['tiffany', 'eddy', 31, 35.94, 0.185, 47.715191, '- 98.848133', 3802778860, 1759415], ['tioga', 'williams', 104, 34.437, 0.151, 48.423224, '- 102.961858', 3810578980, 1037030], ['tolgen', 'ward', 29, 33.679, 2.213, 48.149479, '- 101.724985', 3810179100, 1036984], ['torgerson', 'pierce', 62, 33.181, 2.255, 48.425558, '- 99.924452', 3806979220, 1759561], ['torning', 'ward', 64, 34.401, 1.783, 48.071326, '- 101.482912', 3810179260, 1036955], ['tower', 'cass', 54, 34.556, 0.003, 46.941938, '- 97.608616', 3801779300, 1036378], ['trenton', 'williams', 541, 30.527, 1.956, 48.071095, '- 103.805216', 3810579500, 1036977], ['tri', 'mckenzie', 104, 113.817, 10.99, 48.016174, '- 103.665710', 3805379520, 1954181], ['trier', 'cavalier', 50, 30.346, 1.924, 48.681579, '- 98.895032', 3801979540, 1759383], ['triumph', 'ramsey', 38, 36.106, 0.493, 48.332618, '- 98.497709', 3807179580, 1759597], ['troy', 'divide', 45, 34.379, 1.584, 48.858036, '- 103.388573', 3802379660, 1036927], ['truax', 'williams', 190, 49.301, 7.797, 48.12222, '- 103.283768', 3810579740, 1036979], ['truman', 'pierce', 54, 35.36, 0.457, 47.898085, '- 99.994799', 3806979780, 1759562], ['trygg', 'burleigh', 40, 36.028, 0.0, 47.025735, '- 100.431786', 3801579820, 1037132], ['tuller', 'ransom', 107, 36.008, 0.01, 46.50733, '- 97.710566', 3807379860, 1036872], ['turtle lake', 'mclean', 43, 33.978, 1.982, 47.548602, '- 100.985957', 3805579980, 2397883], ['turtle river', 'grand forks', 174, 33.291, 0.272, 48.142938, '- 97.202245', 3803580060, 1036622], ['tuscarora', 'pierce', 62, 34.634, 1.241, 48.239469, '- 100.031162', 3806980100, 1759563], ['tuttle', 'kidder', 39, 34.48, 1.013, 47.1052, '- 100.051684', 3804380180, 1037159], ['twelve mile', 'williams', 74, 62.235, 7.737, 48.121003, '- 103.422014', 3810580220, 1036998], ['twin butte', 'divide', 18, 34.69, 1.361, 48.851599, '- 103.530568', 3802380260, 1759398], ['twin hill', 'towner', 39, 34.908, 0.901, 48.681853, '- 99.032808', 3809580340, 1759668], ['twin lake', 'benson', 39, 33.869, 2.113, 48.239127, '- 99.663851', 3800580380, 1759260], ['twin tree', 'benson', 143, 36.341, 0.213, 47.8974, '- 98.979574', 3800580420, 1759261], ['twin valley', 'mckenzie', 114, 79.127, 19.604, 48.045233, '- 103.184756', 3805380460, 1036972], ['tyrol', 'griggs', 116, 36.673, 0.191, 47.530487, '- 98.186907', 3803980580, 1036650]]}\n\nLet's get start!\nQuestion: Could you create a bar chart to show the top 5 counties with the highest total land area (in square miles), with each bar representing a county and its corresponding land area?\n"
    },
    {
        "id": "1c37b8e9a57afaa04e2549ddc058b08c",
        "file_name": "1c37b8e9a57afaa04e2549ddc058b08c.csv",
        "question": "Can you generate a horizontal bar chart to visualize the lifespan of each locomotive, with the x-axis representing the years and the y-axis representing the locomotive names?",
        "answer": "y_references = [[69, 69, 65, 69, 68, 72]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['MGWR No.', 'Name', 'Builder', 'Introduced', 'D-bogie', 'GSR No.', 'Withdrawn'], 'data': [['2', 'Jupiter', 'Beyer-Peacock', '1880', '1900', '534', '1949'], ['3', 'Juno', 'Beyer-Peacock', '1880', '1901', '535', '1949'], ['25→4', 'Cyclops', 'Beyer-Peacock', '1880', '1901', '531', '1945'], ['26→5', 'Britania', 'Beyer-Peacock', '1880', '1900', '532', '1949'], ['36→1', 'Empress of Austria', 'Beyer-Peacock', '1881', '1900', '530', '1949'], ['37→35→6', 'Wolfdog', 'Beyer-Peacock', '1881', '1900', '533', '1953']]}\n\nLet's get start!\nQuestion: Can you generate a horizontal bar chart to visualize the lifespan of each locomotive, with the x-axis representing the years and the y-axis representing the locomotive names?\n"
    },
    {
        "id": "d4d6a955f12c1e81e21bcb9aebb17f0c",
        "file_name": "d4d6a955f12c1e81e21bcb9aebb17f0c.csv",
        "question": "Can you create a bar chart that displays the top 10 surnames by their number of bearers in 2009 on the x-axis and the corresponding number of bearers on the y-axis, with each bar labeled by the surname?",
        "answer": "y_references = [[278.78, 275.74, 231.22, 173.64, 165.87, 125.19, 122.71, 117.3, 99.24, 93.18]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['rank', 'surname', 'number of bearers 1971', 'number of bearers 2009', 'type', 'etymology'], 'data': [[1, 'jensen', 368.631, 278.782, 'patronymic', 'son of jens'], [2, 'nielsen', 349.126, 275.744, 'patronymic', 'son of niels'], [3, 'hansen', 297.937, 231.221, 'patronymic', 'son of hans'], [4, 'pedersen', 203.426, 173.639, 'patronymic', 'son of peder'], [5, 'andersen', 188.359, 165.871, 'patronymic', 'son of anders'], [6, 'christensen', 159.943, 125.192, 'patronymic', 'son of christen'], [7, 'larsen', 148.214, 122.712, 'patronymic', 'son of lars'], [8, 'sørensen', 139.111, 117.3, 'patronymic', 'son of søren'], [9, 'rasmussen', 117.355, 99.238, 'patronymic', 'son of rasmus'], [10, 'jørgensen', 110.132, 93.182, 'patronymic', 'son of jørgen'], [11, 'petersen', 130.236, 85.268, 'patronymic', 'son of peter'], [12, 'madsen', 76.441, 67.075, 'patronymic', 'son of mads'], [13, 'kristensen', 58.99, 62.549, 'patronymic', 'son of kristen'], [14, 'olsen', 65.194, 50.904, 'patronymic', 'son of ole'], [15, 'thomsen', 40.18, 39.86, 'patronymic', 'son of thomas'], [16, 'christiansen', 45.984, 38.528, 'patronymic', 'son of christian'], [17, 'poulsen', 36.544, 33.106, 'patronymic', 'son of poul'], [18, 'johansen', 36.47, 32.166, 'patronymic', 'son of johan'], [19, 'knudsen', 34.66, 30.634, 'patronymic', 'son of knud'], [20, 'møller', 31.645, 30.516, 'occupational', 'miller']]}\n\nLet's get start!\nQuestion: Can you create a bar chart that displays the top 10 surnames by their number of bearers in 2009 on the x-axis and the corresponding number of bearers on the y-axis, with each bar labeled by the surname?\n"
    },
    {
        "id": "bbda9a858ef116f491529e0fe820e1a9",
        "file_name": "bbda9a858ef116f491529e0fe820e1a9.csv",
        "question": "Can you create a scatter plot to display the relationship between specimen weight/size and estimated exposure (mrem/hr)?",
        "answer": "y_references = [[2.78, 0.28, 0.03, 0.0, 0.0, 0.0]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['specimen weight / size', 'calculated activity ( bq )', 'calculated activity ( ci )', 'estimated activity gr (api)', 'estimated exposure ( mrem ) / hr'], 'data': [['1000 g / 8.79 cm', 183355, '4.9610 6', 8449.31, 2.78], ['100 g / 4.08 cm', 18336, '4.9610 7', 844.93, 0.28], ['10 g / 1.89 cm', 1834, '4.9610 8', 84.49, 0.03], ['1 g / 8.79 mm', 183, '4.9610 9', 8.45, 0.0], ['0.1 g / 4.08 mm', 18, '4.9610 10', 0.84, 0.0], ['0.01 g / 1.89 mm', 2, '4.9610 11', 0.08, 0.0]]}\n\nLet's get start!\nQuestion: Can you create a scatter plot to display the relationship between specimen weight/size and estimated exposure (mrem/hr)?\n"
    },
    {
        "id": "92dd1f500ae353c8d3cb4561626c578f",
        "file_name": "92dd1f500ae353c8d3cb4561626c578f.csv",
        "question": "Could you create a bar chart to compare the goal differences of the top 5 teams in the league, with each bar representing a team and its corresponding goal difference?",
        "answer": "y_references = [34, 28, 20, 18, 27]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['position', 'club', 'played', 'points', 'wins', 'draws', 'losses', 'goals for', 'goals against', 'goal difference'], 'data': [[1, 'rcd español', 38, 52, 20, 12, 6, 59, 25, '+ 34'], [2, 'real betis', 38, 51, 22, 7, 9, 66, 38, '+ 28'], [3, 'sd compostela', 38, 49, 21, 7, 10, 56, 36, '+ 20'], [4, 'cd toledo', 38, 47, 18, 11, 9, 50, 32, '+ 18'], [5, 'rcd mallorca', 38, 47, 20, 7, 11, 66, 39, '+ 27'], [6, 'real madrid b', 38, 46, 19, 8, 11, 57, 41, '+ 16'], [7, 'hércules cf', 38, 44, 16, 12, 10, 41, 35, '+ 6'], [8, 'barcelona b', 38, 39, 11, 17, 10, 59, 51, '+ 8'], [9, 'cp mérida', 38, 37, 12, 13, 13, 47, 41, '+ 6'], [10, 'sd eibar', 38, 35, 10, 15, 13, 30, 40, '- 10'], [11, 'cd badajoz', 38, 35, 12, 11, 15, 45, 46, '- 1'], [12, 'atlético marbella', 38, 35, 10, 15, 13, 40, 41, '- 1'], [13, 'palamós cf', 38, 34, 11, 12, 15, 40, 49, '- 9'], [14, 'athletic de bilbao b', 38, 34, 10, 14, 14, 46, 52, '- 6'], [15, 'cd leganés', 38, 34, 11, 12, 15, 53, 59, '- 6'], [16, 'villarreal cf', 38, 34, 14, 6, 18, 29, 48, '- 19'], [17, 'cd castellón', 38, 32, 9, 14, 15, 30, 48, '- 18'], [18, 'real murcia', 38, 31, 10, 11, 17, 40, 64, '- 24'], [19, 'real burgos 1', 38, 26, 10, 6, 22, 38, 68, '- 30'], [20, 'cádiz cf', 38, 18, 4, 10, 24, 28, 67, '- 39']]}\n\nLet's get start!\nQuestion: Could you create a bar chart to compare the goal differences of the top 5 teams in the league, with each bar representing a team and its corresponding goal difference?\n"
    },
    {
        "id": "a28aa98e66b222fe527ad474b890709b",
        "file_name": "a28aa98e66b222fe527ad474b890709b.csv",
        "question": "Can you generate a line chart to visualize the relationship between the periselene and aposelene distances over time, using the epoch (utc) as the x-axis?",
        "answer": "y_references = [6700.72, 5454.92, 2751.51, 2208.66, 2283.74, 2291.25, 2256.09, 53215.15, 20713.1, 6941.36, 4618.22, 4523.11, 4515.86, 4549.2]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['epoch (utc)', 'periselene (km)', 'aposelene (km)', 'eccentricity', 'inclination (deg) (to moon equator)', 'period (h)'], 'data': [['november 15 , 2004 , 17:47:12.1', 6700.72, 53215.151, 0.776329, 81.085, 129.247777], ['december 4 , 2004 10:37:47.3', 5454.925, 20713.095, 0.583085, 83.035, 37.304959], ['january 9 , 2005 , 15:24:55.0', 2751.511, 6941.359, 0.432261, 87.892, 8.409861], ['february 28 , 2005 , 05:18:39.9', 2208.659, 4618.22, 0.352952, 90.063603, 4.970998], ['april 25 , 2005 , 08:19:05.4', 2283.738, 4523.111, 0.328988, 90.141407, 4.949137], ['may 16 , 2005 , 09:08:52.9', 2291.25, 4515.857, 0.326807, 89.734929, 4.949919], ['june 20 , 2005 , 10:21:37.1', 2256.09, 4549.196, 0.33696, 90.232619, 4.947432]]}\n\nLet's get start!\nQuestion: Can you generate a line chart to visualize the relationship between the periselene and aposelene distances over time, using the epoch (utc) as the x-axis?\n"
    },
    {
        "id": "93ba281742f9dcacc81800f11074ddcc",
        "file_name": "93ba281742f9dcacc81800f11074ddcc.csv",
        "question": "Could you create a bar chart to compare the sales of the top 5 companies in the oil and gas industry, with each bar representing a different company?",
        "answer": "y_references = [[369.1, 341.6, 222.3, 189.6, 188.1]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['rank', 'company', 'headquarters', 'industry', 'sales (billion )', 'profits (billion )', 'assets (billion )', 'market value (billion )'], 'data': [[1, 'jpmorgan chase', 'usa', 'banking', 115.5, 17.4, 2117.6, 182.2], [2, 'hsbc', 'uk', 'banking', 103.3, 13.3, 2467.9, 186.5], [3, 'general electric', 'usa', 'conglomerate', 156.2, 11.6, 751.2, 216.2], [4, 'exxonmobil', 'usa', 'oil and gas', 341.6, 30.5, 302.5, 407.2], [5, 'royal dutch shell', 'netherlands', 'oil and gas', 369.1, 20.1, 317.2, 212.9], [6, 'petrochina', 'china', 'oil and gas', 222.3, 21.2, 251.3, 320.8], [7, 'industrial and commercial bank of china', 'china', 'banking', 69.2, 18.8, 1723.5, 239.5], [8, 'berkshire hathaway', 'usa', 'conglomerate', 136.2, 13.0, 372.2, 211.0], [8, 'petrobras', 'brazil', 'oil and gas', 121.3, 21.2, 313.2, 238.8], [10, 'citigroup', 'usa', 'banking', 111.5, 10.6, 1913.9, 132.8], [11, 'bnp paribas', 'france', 'banking', 130.4, 10.5, 2680.7, 88.0], [11, 'wells fargo', 'usa', 'banking', 93.2, 12.4, 1258.1, 170.6], [13, 'santander group', 'spain', 'banking', 109.7, 12.8, 1570.6, 94.7], [14, 'at&t inc', 'usa', 'telecommunications', 124.3, 19.9, 268.5, 168.2], [15, 'gazprom', 'russia', 'oil and gas', 98.7, 25.7, 275.9, 172.9], [16, 'chevron', 'usa', 'oil and gas', 189.6, 19.0, 184.8, 200.6], [17, 'china construction bank', 'china', 'banking', 58.2, 15.6, 1408.0, 224.8], [18, 'walmart', 'usa', 'retailing', 421.8, 16.4, 180.7, 187.3], [19, 'total', 'france', 'oil and gas', 188.1, 14.2, 192.8, 138.0], [20, 'allianz', 'germany', 'insurance', 142.9, 6.7, 838.4, 62.7]]}\n\nLet's get start!\nQuestion: Could you create a bar chart to compare the sales of the top 5 companies in the oil and gas industry, with each bar representing a different company?\n"
    },
    {
        "id": "62115c3dde92e599d85003e61d7debf3",
        "file_name": "62115c3dde92e599d85003e61d7debf3.csv",
        "question": "Can you create a bar chart to compare the average 'mpg (US gallons)' for diesel and petrol fuel types?",
        "answer": "y_references = [[42.0, 38.15]]",
        "instruction": "You are a table analyst. Your task is to answer questions based on the table content.\n\n\nThe answer should follow the format below and ensure the first three code lines is exactly the same with the following code block:\n[Answer Format]\n```python\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.read_csv('table.csv')\n...\nplt.show()\n```\n\nEnsure the final answer format is the python code block that can generate the chart correctly. Ensure the last line in python code can only be \"plt.show()\", no other from.\n\n\nGive the final answer to the question directly without any explanation.\n\nRead the table below in JSON format:\n[TABLE] \n{'columns': ['Model', 'Fuel Type', 'mpg (US gallons)', 'L/100 km', 'NZ Rating\\n(Stars)'], 'data': [['Volkswagen Polo 1.4 TDI BLUEMOTION', 'diesel', 62.0, 3.8, 5.5], ['Volkswagen Polo 1.4 TDI 5M', 'diesel', 52.0, 4.5, 5.5], ['Volkswagen Polo 1.4 MAN', 'petrol', 36.7, 6.4, 4.5], ['Volkswagen Polo 1.4 6A', 'petrol', 34.0, 6.9, 4.5], ['Fiat 500 1.3 JTD POP', 'diesel', 56.0, 4.2, 5.5], ['Fiat 500 1.2 POP', 'petrol', 46.0, 5.1, 5.0], ['Fiat 500 1.4 LOUNGE 3D', 'petrol', 37.3, 6.3, 4.5], ['Fiat 500 1.4 POP', 'petrol', 37.3, 6.3, 4.5], ['Fiat 500 1.4 SPORT', 'petrol', 37.3, 6.3, 4.5], ['Mini Cooper HATCH 6M 2DR 1.5L Diesel', 'diesel', 53.0, 4.4, 5.5], ['Mini Cooper COUPE 6M 3DR 1.6L Diesel', 'diesel', 52.0, 4.5, 5.5], ['Mini Cooper COUPE 6A 3DR 1.6L Diesel', 'diesel', 43.5, 5.4, 5.0], ['Mini Cooper HATCH 6M 2DR 1.6I', 'petrol', 40.5, 5.8, 5.0], ['Mini Cooper COUPE 6M 3DR 1.6L', 'petrol', 39.2, 6.0, 5.0], ['Mini Cooper HATCH 6M 2DR 1.5L', 'petrol', 35.0, 6.7, 4.5], ['Mini Cooper COUPE 6A 3DR 1.6L', 'petrol', 34.6, 6.8, 4.5], ['Citroen C4 1.6 HDI 6A EGS 5DR', 'diesel', 52.0, 4.5, 5.5], ['Citroen C4 1.6 SX 5DR 5SP M D', 'diesel', 50.0, 4.7, 5.0], ['Citroen C4 2.0 SX 5DR 6SP A D', 'diesel', 37.3, 6.3, 4.5], ['Hyundai Getz 1.5D CRDI 5D M5', 'diesel', 52.0, 4.5, 5.5], ['Hyundai Getz 1.4 5D M5', 'petrol', 38.5, 6.1, 4.5], ['Kia Rio 1.5 DIESEL HATCH MAN', 'diesel', 52.0, 4.5, 5.5], ['Kia Rio 1.5 DIESEL SEDAN MAN', 'diesel', 52.0, 4.5, 5.5], ['Kia Rio 1.6 HATCH MANUAL', 'petrol', 34.6, 6.8, 4.5], ['Volkswagen Golf 1.9 TDI BLUEMOTION', 'diesel', 52.0, 4.5, 5.5], ['Volkswagen Golf 1.9 TDI 7DSG', 'diesel', 44.3, 5.3, 5.0], ['Volkswagen Golf 90KW TSI 7DSG', 'petrol', 39.8, 5.9, 5.0], ['Volkswagen Golf 1.9 TDI 6DSG', 'diesel', 39.2, 6.0, 5.0], ['Volkswagen Golf 2.0 TDI 4 MOTION MAN', 'diesel', 39.2, 6.0, 5.0], ['Volkswagen Golf 2.0 TDI DSG', 'diesel', 39.2, 6.0, 5.0], ['Volkswagen Golf TDI 103KW 6DSG', 'diesel', 38.5, 6.1, 4.5], ['Volkswagen Golf TDI 103KW 4MOTION', 'diesel', 37.3, 6.3, 4.5], ['Fiat Grande Punto 1.3 JTD 5D 6SP', 'diesel', 51.0, 4.6, 5.0], ['Fiat Grande Punto 1.3 JTD 5D DUALOGIC', 'diesel', 51.0, 4.6, 5.0], ['Fiat Grande Punto 1.3 JTD DUAL LOGIC', 'diesel', 46.0, 5.1, 5.0], ['Fiat Grande Punto 1.9 JTD SPORT 3D 6SP', 'diesel', 42.0, 5.6, 5.0], ['Fiat Grande Punto 1.9 EMOTION 5DR 6SPD', 'diesel', 42.0, 5.6, 5.0], ['Fiat Grande Punto 1.9 JTD 5D 6SPEED', 'diesel', 42.0, 5.6, 5.0], ['Fiat Grande Punto 1.4 DYNAMIC 5 SPEED', 'petrol', 38.5, 6.1, 4.5], ['Fiat Grande Punto 1.4 5D DUAL LOGIC', 'petrol', 35.0, 6.7, 4.5], ['Honda Civic Hybrid', 'petrol', 51.0, 4.6, 5.0], ['Hyundai Accent 1.5 CRDI 4D M5 SEDAN', 'diesel', 51.0, 4.6, 5.0], ['Hyundai Accent 1.6 GLS 4D M5', 'petrol', 36.7, 6.4, 4.5], ['Peugeot 308 HDI AT 1.6', 'diesel', 51.0, 4.6, 5.0], ['Peugeot 308 XS MANUAL', 'petrol', 35.0, 6.7, 4.5], ['Peugeot 308 HDI AUTO', 'diesel', 34.6, 6.8, 4.5], ['Skoda Fabia 1.4 TDI', 'diesel', 51.0, 4.6, 5.0], ['Skoda Fabia 1.9 TDI COMBI', 'diesel', 48.0, 4.9, 5.0], ['Volkswagen Jetta 1.9 TDI 7DSG', 'diesel', 51.0, 4.6, 5.0], ['Volkswagen Jetta 2.0 TDI DSG', 'diesel', 43.5, 5.4, 5.0], ['Volkswagen Jetta TDI 103KW 6DSG', 'diesel', 37.9, 6.2, 4.5], ['Hyundai i30 1.6 CRDI ELITE M5', 'diesel', 50.0, 4.7, 5.0], ['Hyundai i30 1.6 CRDI 5D M5', 'diesel', 50.0, 4.7, 5.0], ['Hyundai i30 1.6 CRDI ELITE A4', 'diesel', 39.2, 6.0, 5.0], ['Hyundai i30 1.6 5D M5', 'petrol', 37.9, 6.2, 4.5], ['Peugeot 207 HDI 1.6 5DR 5 SP M D', 'diesel', 49.0, 4.8, 5.0], ['Peugeot 207 XS 1.4 5DR 5SPD M P', 'petrol', 37.3, 6.3, 4.5], ['Citroen C3 1.6 HDI 5DR 5SPD', 'diesel', 48.0, 4.9, 5.0], ['Citroen C3 1.6 5DR 5SPD', 'petrol', 36.2, 6.5, 4.5], ['Kia Cerato 1.6 DIESEL 5M SEDAN', 'diesel', 48.0, 4.9, 5.0], ['Daihatsu Sirion 1.0 HATCH 5MT', 'petrol', 47.0, 5.0, 5.0], ['Daihatsu Sirion 1.3P HATCH 5M', 'petrol', 40.5, 5.8, 5.0], ['Daihatsu Sirion 1.3P HATCH 4A', 'petrol', 36.2, 6.5, 4.5], ['Daihatsu Sirion 1.5P SX HATCH 4AT', 'petrol', 35.0, 6.7, 4.5], ['Smart Fortwo CAB', 'petrol', 47.0, 5.0, 5.0], ['Smart Fortwo COUPE', 'petrol', 47.0, 5.0, 5.0], ['Toyota Corolla 1.4D HATCH5 5M', 'diesel', 47.0, 5.0, 5.0], ['Toyota Corolla 2.0D HATCH5 6M', 'diesel', 43.5, 5.4, 5.0], ['Toyota Corolla 1.5P WAGON 5DR 5M', 'petrol', 40.5, 5.8, 5.0], ['Volkswagen Passat TDI BLUEMOTION SED', 'diesel', 46.0, 5.1, 5.0], ['Volkswagen Passat TDI BLUEMOTION VAR', 'diesel', 44.3, 5.3, 5.0], ['Volkswagen Passat 2.0 TDI DSG SEDAN', 'diesel', 38.5, 6.1, 4.5], ['Volkswagen Passat 2.0 TDI DSG VARIANT', 'diesel', 37.9, 6.2, 4.5], ['Volkswagen Passat TDI 125KW 6DSG SED', 'diesel', 36.2, 6.5, 4.5], ['Volkswagen Passat TDI 125KW 6DSG VAR', 'diesel', 35.6, 6.6, 4.5], ['Volkswagen Passat TDI 103KW 4M VAR', 'diesel', 35.0, 6.7, 4.5], ['Kia Picanto 1.1 MANUAL', 'petrol', 45.2, 5.2, 5.0], ['Kia Picanto 1.1 AUTO', 'petrol', 40.5, 5.8, 5.0], ['Skoda Octavia 1.9 TDI MAN COMBI', 'diesel', 45.2, 5.2, 5.0], ['Skoda Octavia RS 2.0 TDI SEDAN MAN', 'diesel', 41.2, 5.7, 5.0], ['Skoda Octavia RS 2.0 TDI COMBI MAN', 'diesel', 40.5, 5.8, 5.0], ['Skoda Octavia 1.9 TDI AUTO', 'diesel', 40.5, 5.8, 5.0], ['Skoda Octavia 1.9 TDI COMBI AUTO', 'diesel', 40.5, 5.8, 5.0], ['Skoda Octavia 4X4 2.0 TDI COMBI M', 'diesel', 37.9, 6.2, 4.5], ['Skoda Octavia SCOUT 2.0 TDI', 'diesel', 36.7, 6.4, 4.5], ['BMW 118D HATCH 6M 5DR 1.8L', 'diesel', 44.3, 5.3, 5.0], ['BMW 118D HATCH 6A 5DR 1.8L', 'diesel', 39.2, 6.0, 5.0], ['Ford Focus 1.8TD WAGON', 'diesel', 44.3, 5.3, 5.0], ['Ford Focus 1.6 M HATCH', 'petrol', 35.0, 6.7, 4.5], ['Ford Focus WAG 1.6 MAN', 'petrol', 35.0, 6.7, 4.5], ['Mercedes Benz A 180 CDI CLASSIC', 'diesel', 44.3, 5.3, 5.0], ['Mercedes Benz A 180 CDI ELEGANCE', 'diesel', 44.3, 5.3, 5.0], ['Mercedes Benz A 180 CDI AVANTGARDE', 'diesel', 44.3, 5.3, 5.0], ['Mercedes Benz A 200 CDI AVANTGARDE', 'diesel', 43.5, 5.4, 5.0], ['Skoda Roomster 1.9 TDI COMFORT', 'diesel', 43.5, 5.4, 5.0], ['Skoda Roomster 1.9 TDI STYLE', 'diesel', 43.5, 5.4, 5.0], ['Audi A4 2.0 TDI MULTI SEDAN', 'diesel', 42.7, 5.5, 5.0], ['Audi A4 2.0 TDI MULTI', 'diesel', 37.9, 6.2, 4.5], ['Audi A4 2.0 TDI MULTI AVANT', 'diesel', 37.9, 6.2, 4.5], ['Audi A4 2.7 TDI MULTI SEDAN', 'diesel', 35.6, 6.6, 4.5], ['BMW 120D 5 DOOR M E87', 'diesel', 42.7, 5.5, 5.0], ['BMW 120D 5 DOOR A E87', 'diesel', 38.5, 6.1, 4.5], ['Fiat Bravo SPORT JTD 16V 5DR', 'diesel', 42.0, 5.6, 5.0], ['Mitsubishi Colt 1.5P LS 5DR HATCH A', 'petrol', 42.0, 5.6, 5.0], ['Mitsubishi Colt 1.5P VRX 5DR HATCH', 'petrol', 42.0, 5.6, 5.0], ['Mitsubishi Colt 1.5P VRX 5DR HATCH A', 'petrol', 42.0, 5.6, 5.0], ['Mitsubishi Colt 1.5P VRX 5DR HATCHA', 'petrol', 42.0, 5.6, 5.0], ['Mitsubishi Colt 1.5P LS 5DR HATCH M', 'petrol', 39.8, 5.9, 5.0], ['BMW 520D SEDAN 6A 4DR 2.0L', 'diesel', 41.2, 5.7, 5.0], ['Holden Astra MY8.5 CDTI WAGON MAN', 'diesel', 41.2, 5.7, 5.0], ['Holden Astra MY8.5 CDTI HATCH MAN', 'diesel', 41.2, 5.7, 5.0], ['Holden Astra CDTI 5DR HATCH MT', 'diesel', 39.2, 6.0, 5.0], ['Holden Astra CDTI 5DR MAN', 'diesel', 39.2, 6.0, 5.0], ['Mini One HATCH 6M 2DR 1.4I', 'petrol', 41.2, 5.7, 5.0], ['Mini One HATCH 6A 2DR 1.4I', 'petrol', 35.6, 6.6, 4.5], ['Subaru Legacy WAGON 2.0 TD MANUAL', 'diesel', 41.2, 5.7, 5.0], ['Audi A3 2.0 TDI S TRONIC', 'diesel', 40.5, 5.8, 5.0], ['Audi A3 SPORTBACK 1.4T FSI', 'petrol', 40.5, 5.8, 5.0], ['Audi A3 2.0 TDI SP A TRONIC', 'diesel', 38.5, 6.1, 4.5], ['Subaru Outback WAGON 2.0 TD MANUAL', 'diesel', 40.5, 5.8, 5.0], ['BMW 123D COUPE 6M 3DR 2.0L', 'diesel', 39.8, 5.9, 5.0], ['BMW 123D Saloon 6M 5DR 2.3L', 'diesel', 39.8, 5.9, 5.0], ['BMW 123D HATCH 6M 5DR 2.3L', 'diesel', 38.5, 6.1, 4.5], ['BMW 123D 2.3L 6A 3DR COUPE', 'diesel', 38.5, 6.1, 4.5], ['Daihatsu Charade 1.0P HATCH5 4A', 'petrol', 39.8, 5.9, 5.0], ['Saab 9-3 Linear SPCOMBI1.9MT', 'diesel', 39.8, 5.9, 5.0], ['Saab 9-3 Linear CONVERTIBLE 1.9TID M', 'diesel', 37.3, 6.3, 4.5], ['Volkswagen Caddy DELIVERY 1.9TDI DSG', 'diesel', 39.8, 5.9, 5.0], ['Volkswagen Caddy DELIVERY 1.9TDI MAN', 'diesel', 38.5, 6.1, 4.5], ['Volkswagen Caddy LIFE 1.9 TDI DSG', 'diesel', 38.5, 6.1, 4.5], ['Volkswagen Caddy LIFE 1.9 TDI MAN', 'diesel', 37.9, 6.2, 4.5], ['Alfa Romeo 147 1.9 JTD 16V 5DR 6 SP', 'diesel', 39.2, 6.0, 5.0], ['Alfa Romeo 159 1.9 JTD 4D 6SP SEDAN', 'diesel', 39.2, 6.0, 5.0], ['Alfa Romeo 159 2.4 JTD 4D 6SP SEDAN', 'diesel', 34.6, 6.8, 4.5], ['BMW 320D SEDAN 6A 4DR 2.0L', 'diesel', 39.2, 6.0, 5.0], ['BMW 320D TOURING 6A 5DR 2.0L', 'diesel', 38.5, 6.1, 4.5], ['Daihatsu Copen 1.3P COUPE CONV 5M', 'petrol', 39.2, 6.0, 5.0], ['Hyundai Sonata 2.0 CRDI M6', 'diesel', 39.2, 6.0, 5.0], ['Dodge Caliber SXT CRD', 'diesel', 38.5, 6.1, 4.5], ['Honda Jazz SPORT', 'petrol', 38.5, 6.1, 4.5], ['Holden Combo XC 1.4 MANUAL', 'petrol', 37.9, 6.2, 4.5], ['Mercedes Benz B 200 CDI', 'diesel', 37.9, 6.2, 4.5], ['Suzuki Swift GLX 1.5 5DR', 'petrol', 37.3, 6.3, 4.5], ['Suzuki Swift GLXH 1.5 5DR', 'petrol', 37.3, 6.3, 4.5], ['Suzuki Swift GLXH2 1.5 5DR', 'petrol', 37.3, 6.3, 4.5], ['Suzuki Swift GLXA 1.5 5DR', 'petrol', 35.0, 6.7, 4.5], ['Suzuki Swift GLXHA 1.5 5DR', 'petrol', 35.0, 6.7, 4.5], ['Suzuki Swift GLXHA2 1.5 5DR', 'petrol', 35.0, 6.7, 4.5], ['Fiat Multipla DYNAMIC 1.9 JTD 5D', 'diesel', 36.7, 6.4, 4.5], ['Mazda Mazda2 CLASSIC 5DR 1.5 M5', 'petrol', 36.7, 6.4, 4.5], ['Mazda Mazda2 SPORT 5 DR 1.5 M 5', 'petrol', 36.7, 6.4, 4.5], ['Mazda Mazda2 SPORT 5 DR 1.5 4AT', 'petrol', 34.6, 6.8, 4.5], ['Mazda Mazda2 CLASSIC 5DR 1.5 4AT', 'petrol', 34.6, 6.8, 4.5], ['Mitsubishi Colt Plus 1.5P RALLIART TURBO', 'petrol', 36.7, 6.4, 4.5], ['Peugeot 307 XS 1.6 5DR 4SPD A P', 'petrol', 36.7, 6.4, 4.5], ['Peugeot 307 XSP 2.0 5DR 5SPD M P', 'petrol', 36.2, 6.5, 4.5], ['Peugeot 307 HDI 2.0 5DR 6SPD A D', 'diesel', 35.0, 6.7, 4.5], ['Peugeot 307 HDI 2.0 5DR 6SPD M D', 'diesel', 35.0, 6.7, 4.5], ['Peugeot 607 HDI 2.2 5DR 6SPM P', 'diesel', 36.7, 6.4, 4.5], ['BMW 330D SEDAN 6M 4DR 3.0L', 'diesel', 36.2, 6.5, 4.5], ['Jeep Compass LTD 2.0L CRD', 'diesel', 36.2, 6.5, 4.5], ['Ford Fiesta 5DR 1.6 M', 'petrol', 35.6, 6.6, 4.5], ['Mitsubishi I-car 660P 5DR A', 'petrol', 39.8, 5.9, 4.5], ['Toyota RAV4 2.2D WAGON 6M L1', 'diesel', 35.6, 6.6, 4.5], ['BMW 118I 5 DOOR M E87', 'petrol', 35.0, 6.7, 4.5], ['Jeep Patriot 2.0L CRD HIGH LINE', 'diesel', 35.0, 6.7, 4.5], ['Renault Clio 1.6 3DR 4SP A P', 'petrol', 35.0, 6.7, 4.5], ['Alfa Romeo Brera 2.4 JTD 3D 6 SPEED', 'diesel', 34.6, 6.8, 4.5], ['Audi A6 2.7 TDI QUATTRO TIP', 'diesel', 34.6, 6.8, 4.5], ['BMW 535D SEDAN 6A 4D 3.0L', 'diesel', 34.6, 6.8, 4.5], ['Suzuki SX4 GLXF 1.6 5DR', 'petrol', 34.6, 6.8, 4.5], ['Suzuki SX4 GLXH2 1.6 5DR', 'petrol', 34.6, 6.8, 4.5], ['Volkswagen Crosstouran 103KW TDI 6DSG', 'diesel', 34.6, 6.8, 4.5], ['Volkswagen Touran 103KW TDI 6DSG', 'diesel', 34.6, 6.8, 4.5], ['Holden Barina 3DR HATCH MANUAL', 'petrol', 34.0, 6.9, 4.5], ['Holden Barina 5DR HATCH MANUAL', 'petrol', 34.0, 6.9, 4.5]]}\n\nLet's get start!\nQuestion: Can you create a bar chart to compare the average 'mpg (US gallons)' for diesel and petrol fuel types?\n"
    }
]